========================================================================
## FILE: spec\alur-kerja.md
========================================================================

### **Spesifikasi Alur Kerja & Interaksi Entitas (Versi Final: PWA-Centric)**

## 1. Pendahuluan

Dokumen ini mendefinisikan alur kerja fungsional, peran, tanggung jawab, dan interaksi antara semua entitas dalam **Platform Cerdas**, sebuah sistem survei statistik berbasis CAPI. Arsitektur platform ini terdiri dari tiga komponen utama:

- **Cerdas Mobile:** Aplikasi antarmuka berbasis Progressive Web App (PWA) untuk petugas lapangan (PPL dan PML).
- **Cerdas-SM (Survei Management):** Layanan backend yang mengatur seluruh logika bisnis, data, dan API.
- **Cerdas Form Builder:** Komponen yang direncanakan untuk manajemen skema formulir dinamis (akan dikembangkan di masa depan).

Arsitektur yang dijelaskan di sini berpusat pada **Cerdas Mobile (PWA)** sebagai antarmuka utama untuk semua peran operasional di lapangan, yaitu **Petugas Pencacah Lapangan (PPL)** dan **Petugas Pemeriksa Lapangan (PML)**.

Panel administrasi **Filament** secara eksklusif digunakan oleh peran administratif (`super_admin`, `admin_satker`, `admin_kegiatan`) untuk fungsi persiapan, manajemen strategis, pemantauan tingkat tinggi, dan finalisasi data. Dokumen ini bertujuan untuk memberikan pemahaman yang jelas dan mendetail mengenai siklus hidup data, dari persiapan hingga persetujuan akhir, untuk memastikan implementasi logika bisnis yang akurat.

Untuk menjamin kualitas, skalabilitas, dan kemudahan pemeliharaan kode, seluruh proses pengembangan wajib mengacu pada praktik terbaik terkini seperti yang dijabarkan di bawah ini.

### **1.1. Prinsip dan Praktik Terbaik Pengembangan**

Bagian ini menegaskan standar teknologi dan metodologi yang harus diikuti dalam pengembangan setiap komponen Platform Cerdas.

#### **Frontend: Cerdas Mobile (PWA)**

1.  **Framework & Sintaks:**

    - Pengembangan antarmuka PWA **wajib** mengikuti praktik terbaik terkini dari **Framework7-Vue**.
    - Seluruh komponen Vue **wajib** menggunakan sintaks **`<script setup>`**. Pendekatan ini memastikan kode lebih ringkas, mudah dibaca, dan memaksimalkan fitur-fitur Vue 3 Composition API secara penuh. Penggunaan `Options API` tidak diperkenankan untuk komponen baru.

2.  **Penamaan File:**

    - Penamaan file komponen Vue harus mengikuti konvensi **`PascalCase`** (contoh: `ActivityDashboardPage.vue`, `AssignmentCard.vue`). Ini adalah standar komunitas yang meningkatkan keterbacaan dan konsistensi proyek.

3.  **Manajemen Database Lokal (IndexedDB):**
    - Interaksi dengan database IndexedDB di sisi klien **wajib** diimplementasikan menggunakan **Dexie.js versi terbaru**.
    - Implementasi harus secara ketat mengikuti **praktik terbaik (best practice) dan cara terbaru** yang direkomendasikan oleh dokumentasi resmi Dexie.js dan komunitas pengembang. Ini mencakup, namun tidak terbatas pada, desain skema yang efisien, penggunaan transaksi (`transaction`) untuk menjamin integritas data, penanganan _versioning_ dan migrasi skema yang benar, serta penulisan _query_ yang optimal.
    - Sebelum implementasi, pengembang **diwajibkan untuk selalu melakukan riset (Googling)** guna memastikan bahwa pola desain dan teknik yang digunakan adalah yang paling modern dan paling sesuai untuk aplikasi PWA dengan kapabilitas _offline-first_ yang kompleks.

#### **Backend: Cerdas SM (Laravel)**

1.  **Arsitektur & Pola Desain:**

    - Pengembangan backend harus selaras dengan praktik terbaik terbaru dalam ekosistem **Laravel**.
    - Logika bisnis yang kompleks harus diekstraksi dari _Controller_. Gunakan **_Service Classes_** atau **_Action Classes_** untuk menjaga agar _Controller_ tetap ramping dan fokus pada penanganan permintaan HTTP.

2.  **Kualitas Kode & Konsistensi:**
    - Manfaatkan fitur-fitur modern Laravel seperti **`Enum`** untuk status dan tipe data, serta deklarasi **`strict types`** (`declare(strict_types=1);`) untuk meningkatkan keandalan kode.
    - Gunakan **`Eloquent API Resources`** untuk standardisasi dan transformasi data pada respons API, memastikan format output yang konsisten.
    - Implementasikan validasi yang ketat dan eksplisit menggunakan **`Form Requests`** untuk setiap endpoint yang menerima input, guna menjamin integritas data sebelum masuk ke logika bisnis.

## 2. Definisi Entitas dan Peran

### 2.1. Entitas Organisasi & Proyek

- **Satuan Kerja (Satker):** Entitas organisasi dasar (misalnya, BPS Kabupaten/Kota, BPS Provinsi). Bertindak sebagai "Tenant" atau unit kerja utama dalam sistem. Setiap pengguna terafiliasi dengan satu Satker induk.
- **Kegiatan Statistik:** Proyek pengumpulan data (misalnya, "Sensus Pertanian 2026"). Sebuah kegiatan bersifat global dan dapat melibatkan banyak `Satker` sebagai pelaksana.
- **Assignment:** Unit tugas terkecil yang diberikan kepada petugas lapangan, didefinisikan oleh **hierarki wilayah kerja berbasis level (hingga 6 level)**. Setiap assignment terikat pada satu `Kegiatan Statistik`, satu `PPL`, dan satu `PML`.
- **Assignment Response:** Wadah untuk data yang dikumpulkan dari sebuah `Assignment`. Entitas ini memiliki siklus hidup yang dinamis, direpresentasikan oleh `status`, dan menjadi objek utama dalam alur kerja operasional.

### 2.2. Alur Kerja Login dan Pendaftaran

Sistem mendukung dua metode autentikasi: email/password tradisional dan Single Sign-On (SSO) melalui Google. Alur pendaftaran mandiri via Google diizinkan untuk mempermudah pengguna.

#### **Alur 1: Pendaftaran Mandiri (Pengguna Baru via Google)**

1.  Pengguna baru membuka halaman login dan memilih **"Login dengan Google"**.
2.  Setelah autentikasi Google berhasil, backend menerima profil pengguna.
3.  Backend memeriksa apakah `google_id` atau `email` sudah ada di database. Jika tidak ada, backend akan **membuat akun `User` baru**.
4.  Akun baru ini akan memiliki `satker_id = NULL`, menjadikannya "Pengguna Mengambang" (_Floating User_).
5.  Pengguna berhasil login tetapi akan melihat pesan bahwa mereka belum terafiliasi dengan Satker atau kegiatan manapun dan harus menghubungi administrator.

#### **Alur 2: Penautan Otomatis (Pengguna Sudah Dibuat Admin)**

1.  Seorang Admin telah membuat akun untuk PPL dengan `email` tertentu, namun PPL tersebut belum pernah login.
2.  PPL memilih **"Login dengan Google"** menggunakan akun Google dengan email yang sama.
3.  Backend mendeteksi bahwa `email` tersebut sudah ada tetapi `google_id`-nya masih kosong.
4.  Backend secara otomatis **menautkan akun Google** tersebut dengan memperbarui kolom `google_id` pada record pengguna yang ada.
5.  Login berhasil, dan pengguna langsung dapat mengakses kegiatannya.

#### **Alur 3: Login Normal (Akun Sudah Tertaut)**

1.  Pengguna yang sudah pernah login dengan Google sebelumnya mengklik **"Login dengan Google"**.
2.  Backend menemukan `User` berdasarkan `google_id` yang cocok.
3.  Login berhasil seketika.

*Untuk detail implementasi teknis login, lihat `App\Http\Controllers\Auth\LoginController` dan `App\Http\Controllers\Auth\GoogleLoginController` di `GEMINI.md`.*

### 2.3. Peran Pengguna (Dikelola oleh Filament Shield)

Peran bersifat kontekstual dan diberikan kepada pengguna dalam lingkup `Kegiatan Statistik` tertentu.

#### **A. Pengguna Panel Filament (Peran Administratif)**

- **`super_admin`**

  - **Tanggung Jawab:** Mengelola keseluruhan sistem dan entitas tingkat tertinggi.
  - **Kewenangan (via Filament):**
    - Membuat, mengedit, dan menghapus `Satker`.
    - Membuat, mengedit, dan menghapus `Kegiatan Statistik`, termasuk mendesain `form_schema` dan versinya.
    - Menugaskan `Satker` pelaksana ke dalam sebuah `Kegiatan Statistik`.
    - Membuat akun pengguna untuk `admin_satker`.

- **`admin_satker`**

  - **Tanggung Jawab:** Mengelola sumber daya manusia di dalam Satker-nya.
  - **Kewenangan (via Filament, dalam lingkup Satker-nya):**
    - Membuat, mengedit, dan menonaktifkan akun User (terutama untuk pengguna yang tidak menggunakan login Google atau perlu dibuatkan akun secara manual).

- **`admin_kegiatan`**
  - **Tanggung Jawab:** Mengelola pelaksanaan operasional sebuah `Kegiatan Statistik` di dalam Satker-nya.
  - **Kewenangan (via Filament, dalam lingkup Kegiatan & Satker-nya):**
    - **Merekrut Anggota Tim:** Mencari dan menambahkan `User` (berdasarkan email) dari seluruh sistem ke dalam kegiatan. Saat seorang pengguna direkrut, `satker_id` mereka akan diatur ke Satker milik Admin, dan mereka ditambahkan sebagai anggota kegiatan (`kegiatan_members`).
    - Memberikan peran (`Roles`) `PML` dan `PPL` kepada anggota kegiatan menggunakan Filament Shield.
    - Mengelola `Assignment`: Membuat, menugaskan, dan mengalihkan tugas (re-assign) PPL dan PML jika diperlukan selama periode lapangan.
    - Memantau progres operasional: Memantau progres seluruh assignment melalui dasbor dan laporan generik (misalnya, jumlah berdasarkan status, kemajuan per petugas atau wilayah).
    - Melakukan tindakan final (`Approve by Admin`, `Reject by Admin`) pada data yang sudah lolos dari siklus PPL-PML.

#### **B. Pengguna PWA (Peran Lapangan/Operasional)**

- **`PML (Petugas Pemeriksa Lapangan)`**

  - **Tanggung Jawab:** Memeriksa dan memastikan kualitas data yang dikumpulkan oleh PPL yang berada di bawah pengawasannya, langsung melalui PWA.
  - **Kewenangan (via PWA):**
    - Melihat daftar PPL yang diawasinya dan progres mereka.
    - Melihat daftar `Assignment` dari PPL-nya yang berstatus `Submitted by PPL` atau status lain yang relevan.
    - Membuka `Assignment Response` dalam mode baca-saja atau mode edit terbatas (sesuai `form_schema`).
    - Melakukan tindakan **Approve** atau **Reject** (dengan `notes` wajib diisi) langsung dari antarmuka PWA.
    - Melakukan tindakan **Batalkan Persetujuan** (dengan `notes` opsional) untuk mengembalikan status `Approved by PML` menjadi `Submitted by PPL` jika terjadi kesalahan persetujuan.

- **`PPL (Petugas Pencacah Lapangan)`**
  - **Tanggung Jawab:** Melakukan wawancara dan mengumpulkan data di lapangan sesuai `Assignment`.
  - **Kewenangan (via PWA, hanya untuk assignment miliknya):**
    - Mengunduh `Assignment` dan `form_schema` untuk kerja offline.
    - Mengisi dan menyimpan data `Assignment Response` secara lokal.
    - Melakukan **Submit** atas `Assignment Response` yang telah selesai.
    - Melihat catatan penolakan dan memperbaiki data yang di-**Reject** oleh PML/Admin.

## 3. Siklus Hidup Pengumpulan Data (Workflow End-to-End)

Ini adalah alur kerja lengkap untuk satu `Assignment Response`, dari awal hingga akhir.

### **Tahap 1: Persiapan (dilakukan di Filament oleh Admin)**

1.  **Pembuatan Kegiatan & Formulir:** `super_admin` membuat `Kegiatan Statistik` baru dan mendesain `form_schema`-nya.
2.  **Penugasan Satker:** `super_admin` menugaskan Satker-satker pelaksana ke dalam kegiatan tersebut.
3.  **Manajemen Tim:** `admin_kegiatan` di setiap Satker pelaksana "merekrut" `User` ke dalam kegiatan dan memberikan peran `PML` atau `PPL` menggunakan Filament Shield.
4.  **Pembuatan Assignment:** `admin_kegiatan` membuat `Assignment`, menautkannya ke PPL dan PML yang relevan. Proses ini sangat fleksibel untuk mendukung berbagai metodologi survei. - **Skenario A: Pembuatan Awal (Manual/Impor):** Untuk kegiatan yang tidak memiliki prelist (misalnya, Listing awal), Admin dapat membuat `Assignment` secara manual atau melalui fitur impor dari file CSV/Excel.

- **Skenario B: Pembuatan dari Hasil Kegiatan Sebelumnya:** Sistem menyediakan fitur untuk men-generate `Assignment` berdasarkan hasil dari kegiatan lain. Ini adalah alur kerja standar untuk skenario seperti:

  - **Listing → Pendataan:** `Assignment` untuk kegiatan "Pendataan" dibuat dari daftar responden yang valid dari `assignment_responses` kegiatan "Listing".
  - **Pendataan → Post Enumeration Survey (PES):** `Assignment` untuk kegiatan "PES" dibuat dengan mengambil sampel (misalnya 5%) dari `Assignment` kegiatan "Pendataan" utama.

- **Proses Pra-Isi Data:** Selama pembuatan `Assignment` (baik skenario A maupun B), sistem dapat mengisi kolom `prefilled_data`. Data ini (misalnya, nama kepala rumah tangga atau nama perusahaan) akan ditampilkan kepada PPL di PWA untuk membantu identifikasi responden di lapangan.

Saat sebuah `Assignment` dibuat, `Assignment Response` baru juga dibuat secara otomatis dengan `status` awal **`Assigned`**.

### **Tahap 2: Pengumpulan Data oleh PPL (dilakukan di PWA)**

1.  **Persiapan & Pengunduhan Awal Kegiatan (Per-Kegiatan):** Setelah PPL memilih sebuah kegiatan dari halaman beranda PWA, aplikasi akan memulai proses persiapan untuk kerja offline:
    a. **Pengecekan Lokal:** Aplikasi memeriksa apakah data inti untuk kegiatan ini sudah ada di IndexedDB.
    b. **Unduh Data Inti:** Jika belum ada, PWA memanggil endpoint `initial-data/{activityId}` untuk mengunduh `Assignment` yang ditugaskan, `form_schema` versi terbaru, dan data relevan lainnya. (Lihat `ActivityController::getInitialData`)
    c. **Identifikasi & Unduh Master Data:** PWA mem-parsing properti `masters_used` di `form_schema` dan mengunduh semua master data yang diperlukan.
    d. **Simpan ke Lokal:** Semua data disimpan ke IndexedDB. UI harus menampilkan progres yang jelas selama proses ini.

2.  **Mulai Bekerja:** PPL membuka sebuah assignment. Status `Assignment Response` di PWA secara internal dapat dianggap **`Opened`**.

3.  **Pengisian Data (Offline):** PPL mengisi formulir. Setiap perubahan data disimpan secara otomatis ke IndexedDB (auto-save).

    - **Catatan Penting:** Data dari `prefilled_data` (misalnya, nama kepala rumah tangga) akan ditampilkan sebagai informasi referensi yang **bersifat read-only**. Jika PPL perlu mengoreksi data ini, ia akan mengisinya di field kuesioner yang sesuai, yang kemudian akan disimpan di dalam objek `responses`.

4.  **Submit:** Setelah selesai, PPL menekan tombol "Submit".
    - Di PWA, status `Assignment Response` diubah menjadi **`Submitted by PPL`**.
    - Antarmuka formulir untuk assignment tersebut menjadi **terkunci (read-only)** bagi PPL.
    - Aksi "submit" ini beserta seluruh datanya dimasukkan ke dalam antrean sinkronisasi (`sync_queue`). (Lihat `ActivityController::submitAssignments`)
5.  **Sinkronisasi ke Server:** Saat perangkat PPL online, `SyncEngine` mengirimkan data ke server. Server memvalidasi data, memastikan PPL memiliki izin, dan memperbarui `status` di database menjadi **`Submitted by PPL`**.

### **Tahap 3: Pemeriksaan oleh PML (dilakukan di PWA)**

1.  **Sinkronisasi PML:** PML login ke PWA. Aplikasi memanggil endpoint `initial-data` (yang disesuaikan untuk PML) dan mengunduh `Assignment` dari semua PPL yang diawasinya, terutama yang memerlukan tindakan (misalnya, berstatus `Submitted by PPL`).
2.  **Dasbor Pemeriksaan:** Antarmuka PWA untuk PML menampilkan daftar tugas pemeriksaan, dikelompokkan berdasarkan PPL atau status.
3.  **Proses Review:** PML memilih sebuah assignment untuk diperiksa. PWA menampilkan data `Assignment Response` yang telah diisi PPL. Tergantung `form_schema`, beberapa field mungkin bisa diedit oleh PML, sementara yang lain bersifat read-only.
4.  **Keputusan Pemeriksaan:**

- **Prasyarat - Pengecekan Aksi Online:** Sebelum menampilkan tombol "Approve" atau "Reject", PWA **wajib** melakukan panggilan ke API server (misalnya, `GET /api/assignments/{id}/allowed-actions`). Panggilan ini bertujuan untuk mengkonfirmasi aksi apa yang diizinkan oleh sistem pada saat itu. Jika perangkat PML sedang offline, tombol-tombol aksi ini akan dinonaktifkan atau disembunyikan. (Lihat `ActivityController::getAllowedActions`)
- **Skenario A: Approve (Data Diterima):**
  - PML menekan tombol "Approve".
  - Di PWA, status `Assignment Response` diubah menjadi **`Approved by PML`**.
  - Aksi "approve" ini (berisi `assignment_id`, `status` baru, dan `version`) dimasukkan ke dalam `sync_queue` PML.
- **Skenario B: Reject (Data Ditolak):**
  - PML menekan tombol "Reject".
  - PWA menampilkan modal yang **mewajibkan** PML untuk mengisi alasan penolakan (`notes`).
  - Di PWA, status `Assignment Response` diubah menjadi **`Rejected by PML`** dan `notes` disimpan.
  - Aksi "reject" ini dimasukkan ke dalam `sync_queue` PML.
- **Skenario C: Batalkan Persetujuan (Koreksi Kesalahan):**
  - PML menekan tombol "Batalkan Persetujuan" (Revert Approval).
  - PWA menampilkan modal yang **opsional** bagi PML untuk mengisi alasan pembatalan (`notes`).
  - Di PWA, status `Assignment Response` diubah menjadi **`Submitted by PPL`** dan `notes` disimpan.
  - Aksi "batalkan persetujuan" ini dimasukkan ke dalam `sync_queue` PML.

*Untuk detail implementasi teknis perubahan status, lihat `AssignmentStatusController::update`.*

5.  **Sinkronisasi Keputusan:** Saat perangkat PML online, `SyncEngine` mengirimkan keputusan (approve/reject) ke server. Server memvalidasi (memastikan PML berwenang) dan memperbarui `status` di database.

### **Tahap 4: Siklus Perbaikan (interaksi PWA-ke-PWA)**

1.  **Pemberitahuan ke PPL:** Saat PPL melakukan sinkronisasi berikutnya, PWA-nya akan mengunduh pembaruan status dari server.
2.  **Membuka Kembali Form:** PWA mendeteksi `status` **`Rejected by PML`** (atau `Rejected by Admin`) untuk salah satu assignment-nya.
3.  **Pembukaan Kunci:** Antarmuka formulir untuk assignment tersebut **dibuka kembali (unlocked)**, memungkinkan PPL untuk mengedit.
4.  **Tampilan Catatan:** Alasan penolakan yang dikirim PML ditampilkan dengan jelas kepada PPL.
5.  **Perbaikan oleh PPL:** PPL memperbaiki data sesuai catatan.
6.  **Submit Ulang:** PPL menekan "Submit" lagi. Proses kembali ke **Tahap 2, Langkah 4**, dan siklus pemeriksaan oleh PML (Tahap 3) akan berulang.

### **Tahap 5: Finalisasi (dilakukan di Filament oleh Admin Kegiatan)**

1.  **Pemantauan Akhir:** `admin_kegiatan` memantau di panel Filament daftar `Assignment Response` yang telah mencapai status `Approved by PML`.
2.  **Keputusan Final:**
    - **Approve Final:** Admin Kegiatan menyetujui data, mengubah `status` menjadi **`Approved by Admin`**. Ini adalah status akhir, menandakan data telah diverifikasi dan bersih.
    - **Reject Final:** Jika Admin Kegiatan menemukan kesalahan krusial, ia dapat melakukan **Reject**. Status berubah menjadi **`Rejected by Admin`**. Data ini akan kembali ke PPL untuk diperbaiki, mengulangi siklus dari Tahap 4.
3.  **Edit Pasca-Periode:** Sesuai `permission`, jika periode pendataan telah berakhir, `admin_kegiatan` dapat langsung mengedit data di Filament untuk pembersihan akhir tanpa mengembalikannya ke PPL.

## 4. Penanganan Perubahan Versi Formulir

Sistem dirancang untuk menangani pembaruan `form_schema` yang mungkin terjadi di tengah periode pengumpulan data.

1.  **Deteksi Versi:** Setiap kali PPL membuka assignment yang dapat diedit di PWA, aplikasi akan membandingkan `form_version_used` yang tersimpan dengan versi terbaru yang tersedia.
2.  **Skenario Pembaruan:**
    - **Data Baru/Kosong:** PWA akan selalu menggunakan `form_schema` versi terbaru.
    - **Data Dikembalikan (`Rejected`):** PWA akan memuat data yang ada tetapi merender formulir menggunakan `form_schema` versi terbaru. UI akan memberitahu PPL bahwa ada pembaruan pada formulir.
3.  **Fleksibilitas Lapangan:** Mengingat PPL mungkin berada di lokasi terpencil, sistem bersifat permisif. Jika PPL tidak dapat memperoleh data untuk pertanyaan baru yang ditambahkan di skema versi baru, PPL tetap dapat mengirimkan ulang data. Saat dikirim, `form_version_used` yang dicatat adalah versi lama, menandakan bahwa data tersebut diisi berdasarkan skema sebelumnya. Ini menjadi penanda bagi `admin_kegiatan` untuk melakukan verifikasi atau pembersihan data di tahap akhir.

## 5. Resolusi Konflik Sinkronisasi

Meskipun `admin_kegiatan` tidak dapat mengedit data selama periode pengumpulan data, sistem tetap menerapkan mekanisme _Optimistic Locking_ menggunakan kolom `version` pada `assignment_responses` untuk mencegah _lost updates_.

1.  **Mekanisme:** Setiap pembaruan data yang dikirim ke server harus menyertakan nomor `version` yang dimiliki oleh PWA.
2.  **Validasi Server:** Server akan membandingkan `version` yang masuk dengan `version` di database.
    -   **Versi Cocok:** Pembaruan diterima, dan server akan menaikkan nomor `version`-nya.
    -   **Versi Tidak Cocok (Konflik `409`):** Pembaruan ditolak dengan error `409 Conflict`. Ini menandakan bahwa data di server telah diperbarui oleh perangkat lain atau Admin sejak terakhir kali PWA melakukan sinkronisasi.
3.  **Penanganan Konflik di PWA (Strategi "Server Wins"):**
    -   Jika PWA menerima error `409 Conflict` saat mencoba mengirim data (misalnya, saat PPL menekan "Submit"), PWA akan menghentikan proses pengiriman untuk item tersebut.
    -   PWA akan menampilkan dialog peringatan yang jelas kepada pengguna. Pesan akan menyatakan: "**Konflik Sinkronisasi:** Tugas ini telah diperbarui di server oleh perangkat lain. Perubahan lokal Anda tidak dapat dikirim. Mohon cadangkan data penting secara manual (misalnya, dengan tangkapan layar), lalu lakukan 'Sync Perubahan' untuk mendapatkan versi terbaru dari server."
    -   Setelah pengguna menutup dialog, item yang gagal akan dihapus dari antrean sinkronisasi (`sync_queue`) untuk mencegah percobaan ulang yang tidak perlu.
    -   **Penting:** Untuk menyelesaikan konflik, pengguna **wajib** melakukan "Sync Perubahan" (Delta Download). Proses ini akan menimpa data lokal dengan versi yang ada di server, sehingga perubahan lokal yang belum disinkronkan akan hilang. Pengguna harus memahami implikasi ini dan melakukan pencadangan manual jika diperlukan.

## 6. Strategi Sinkronisasi Data (PWA)

Sistem PWA mengadopsi model sinkronisasi yang canggih untuk memberikan fleksibilitas dan kontrol kepada pengguna, sekaligus memastikan integritas data. Ada tiga proses utama yang perlu dibedakan:

### 6.1. Upload Perubahan Lokal (Proses Latar Belakang Otomatis)

Proses ini bertanggung jawab untuk **mengirim** data dari PWA ke server.

- **Pemicu:** Proses ini berjalan secara otomatis di latar belakang oleh `SyncEngine` setiap kali perangkat online.
- **Apa yang Dikirim:** `SyncEngine` akan memproses antrean (`sync_queue`) yang berisi semua aksi yang dilakukan pengguna secara offline, seperti:
  - Data kuesioner dari `Assignment` yang baru saja di-**Submit** oleh PPL.
  - Keputusan `Approve` atau `Reject` yang dilakukan oleh PML.
- **Tujuan:** Memastikan semua pekerjaan yang telah diselesaikan di lapangan terkirim ke server pusat tanpa perlu intervensi manual dari pengguna.

### 6.2. Sync Perubahan Assignment (Aksi Pengguna - Delta Download)

Ini adalah mode sinkronisasi utama yang akan sering digunakan oleh PPL dan PML untuk **mengunduh** pembaruan dari server.

- **Pemicu:** Aksi ini dipicu secara manual oleh pengguna melalui tombol "Sync Perubahan Assignment" di dasbor kegiatan.
- **Apa yang Diunduh:** PWA akan meminta semua perubahan yang terjadi di server sejak sinkronisasi terakhir. Ini mencakup:
  - **Assignment baru** yang ditugaskan kepada pengguna.
  - **Perubahan status** pada assignment yang ada (misalnya, dari `Submitted by PPL` menjadi `Rejected by PML`).
  - **Perubahan isian kuesioner** yang mungkin dilakukan oleh PML atau Admin (jika diizinkan oleh alur kerja).
- **Tujuan:** Memperbarui PWA dengan data terbaru dari server secara efisien, tanpa mengunduh ulang seluruh dataset. Hemat waktu dan kuota data.

### 6.3. Sync Full Assignment (Aksi Pengguna - Overwrite Download with Preservation)

Ini adalah mode sinkronisasi "darurat" atau "reset" yang digunakan dalam skenario khusus, dengan mekanisme pengaman untuk data yang baru dibuat secara lokal.

- **Pemicu:** Aksi ini dipicu secara manual oleh pengguna melalui tombol "Sync Full Assignment", yang akan menampilkan dialog konfirmasi tegas.
- **Apa yang Terjadi:**
  1.  **Preservasi Data Lokal Baru:** PWA pertama-tama akan mencari dan menyimpan sementara semua `Assignment` yang dibuat secara lokal dan belum pernah disinkronkan (misalnya, yang memiliki status `PENDING`).
  2.  **Pembersihan Data Lama:** PWA akan menghapus semua data `Assignment` dan `Assignment Response` lainnya untuk kegiatan yang sedang aktif dari database lokal (IndexedDB).
  3.  **Unduh Ulang Data Server:** PWA kemudian akan mengunduh ulang **seluruh** daftar assignment dan isiannya dari server.
  4.  **Re-integrasi Data Lokal:** Setelah unduhan dari server selesai, PWA akan menggabungkan kembali data `Assignment` baru yang telah disimpan sementara ke dalam daftar assignment yang sudah diperbarui.
- **Tujuan:** Menyelesaikan masalah data yang mungkin rusak atau tidak sinkron di PWA dengan cara menimpanya dengan versi data dari server, **sambil memastikan pekerjaan baru yang belum terkirim tidak hilang**.

### 6.4. Penghapusan Assignment Lokal oleh PPL

- **Tujuan:** Untuk memperbaiki kesalahan jika PPL secara tidak sengaja membuat `Assignment` baru.
- **Kewenangan:** Aksi ini hanya dapat dilakukan oleh pengguna dengan peran `PPL`.
- **Kondisi:** Sebuah `Assignment` hanya dapat dihapus jika memenuhi dua syarat: 1) Dibuat secara lokal oleh PPL, dan 2) Statusnya **belum** menjadi `Submitted by PPL`. Secara teknis, ini berlaku untuk `Assignment` dengan status lokal `PENDING`.
- **Mekanisme:** Aksi penghapusan diinisiasi melalui gestur geser (swipe action) pada baris `Assignment` di halaman `AssignmentListPage`.
- **Konfirmasi:** Sebelum proses penghapusan dieksekusi, sebuah dialog konfirmasi **wajib** ditampilkan untuk mencegah kehilangan data yang tidak disengaja.
- **Implikasi Teknis:** Aksi ini hanya menghapus data dari database lokal PWA (IndexedDB). Tidak ada interaksi dengan server yang diperlukan, karena `Assignment` tersebut belum pernah ada di backend.


--- END OF FILE: spec\alur-kerja.md ---



========================================================================
## FILE: spec\data-flow-and-state-management.md
========================================================================

# Alur Data Aplikasi & Pola State Management

Dokumen ini menjelaskan alur data utama dalam aplikasi Cerdas CAPI PWA dan prinsip-prinsip dasar yang digunakan dalam manajemen state (Pinia) dan interaksi data (online/offline).

## Prinsip Desain Utama

Arsitektur frontend aplikasi ini dibangun di atas tiga prinsip utama:

1.  **Offline-First (Utamakan Offline):** UI tidak pernah menunggu jaringan secara langsung. Aplikasi selalu memuat data dari database lokal (IndexedDB via Dexie.js) terlebih dahulu untuk memberikan tampilan yang instan. Sinkronisasi dengan server terjadi di latar belakang, dan UI akan diperbarui setelahnya. Ini penting untuk aplikasi survei lapangan yang mungkin kehilangan koneksi.
2.  **State-Driven UI (UI Digerakkan oleh State):** Komponen Vue (`.vue` files) dibuat "bodoh". Mereka tidak mengelola data yang kompleks. Tugas mereka adalah menampilkan data yang ada di Pinia `stores` dan memanggil `actions` di store tersebut ketika pengguna melakukan sesuatu.
3.  **Pemisahan Tanggung Jawab (Separation of Concerns):**
    *   **Components (Views):** Hanya untuk menampilkan data dan menangkap input pengguna.
    *   **Stores (Pinia):** Pusat logika bisnis. Mengelola state aplikasi, berinteraksi dengan database lokal, dan memanggil `ApiClient` untuk komunikasi jaringan.
    *   **ApiClient:** Satu-satunya bagian yang "berbicara" dengan API backend. Mengelola detail HTTP, token, dan endpoint.

---

## Tiga Store Utama (Pusat Logika)

Aplikasi ini memiliki tiga store utama yang bekerja sama:

### 1. `authStore` (Manajer Otentikasi)
- **Tanggung Jawab Tunggal:** Mengelola identitas pengguna yang sedang login.
- **Analogi:** Petugas keamanan yang memegang kartu identitas Anda.
- **Kapan Digunakan:** Saat login, logout, dan untuk memeriksa apakah pengguna memiliki hak akses di seluruh aplikasi.

### 2. `activityStore` (Manajer Daftar Kegiatan)
- **Tanggung Jawab Tunggal:** Mengelola daftar kegiatan/proyek yang ditugaskan kepada pengguna.
- **Analogi:** Manajer proyek yang memberikan daftar pekerjaan Anda.
- **Kapan Digunakan:** Di `HomePage` untuk menampilkan daftar kegiatan yang bisa dipilih pengguna.

### 3. `dashboardStore` (Manajer Data Aktif & Offline)
- **Tanggung Jawab Tunggal:** Mengelola SEMUA data detail untuk **satu kegiatan yang sedang aktif dibuka**. Ini adalah store yang paling sibuk dan menjadi inti dari fungsionalitas offline.
- **Analogi:** Meja kerja Anda. Saat Anda memilih satu proyek, semua dokumen terkait proyek itu diletakkan di atas meja ini.
- **Kapan Digunakan:** Di `ActivityDashboardPage` dan semua halaman setelahnya (`AssignmentGroupPage`, dll.) untuk menampilkan, mengelola, dan menyinkronkan data penugasan, kuesioner, dan data master.

---

## Alur Perjalanan Pengguna (User Journey)

Berikut adalah alur data langkah demi langkah dari login hingga melihat detail pekerjaan.

**Langkah 1: `LoginPage`**
- **Pemicu:** Pengguna memasukkan kredensial dan menekan "Login".
- **Interaksi Store:** Memanggil `authStore.setAuthState(token, user)`.
- **Sumber Data:** **API Server**. Halaman ini melakukan panggilan jaringan untuk otentikasi.
- **Data Kunci yang Dihasilkan:** `token` dan `user` yang disimpan di `authStore`.

**Langkah 2: `HomePage`**
- **Pemicu:** Navigasi otomatis setelah login berhasil.
- **Interaksi Store:** Memanggil `activityStore.fetchActivities()`.
- **Sumber Data:** **API Server**, kemudian hasilnya disimpan ke **Database Lokal (IndexedDB)**.
- **Data Kunci yang Diteruskan:** Pengguna memilih sebuah kegiatan, dan **`activityId`** dari kegiatan tersebut diteruskan ke halaman berikutnya melalui URL.

**Langkah 3: `ActivityDashboardPage`**
- **Pemicu:** Pengguna mengklik sebuah kegiatan di `HomePage`.
- **Interaksi Store:**
    1.  Memanggil `dashboardStore.loadDashboardData(activityId)` untuk memuat data cepat.
    2.  Memanggil `dashboardStore.syncActivityData(activityId)` untuk sinkronisasi di latar belakang.
- **Sumber Data:**
    1.  **Database Lokal** (untuk tampilan instan).
    2.  **API Server** (untuk sinkronisasi).
- **Data Kunci yang Diteruskan:** **`activityId`** yang sama diteruskan lagi ke halaman berikutnya.

**Langkah 4: `AssignmentGroupPage`**
- **Pemicu:** Pengguna mengklik tombol "Lihat Detail Per Wilayah" di `ActivityDashboardPage`.
- **Interaksi Store:** Tidak ada `action` yang dipanggil. Komponen ini hanya **membaca state** dari `dashboardStore` untuk menampilkan daftar grup penugasan (misal: per kecamatan atau per desa).
- **Sumber Data:** **Hanya dari State `dashboardStore`** yang sudah diisi oleh halaman sebelumnya.
- **Data Kunci yang Diteruskan:** Pengguna memilih sebuah grup, dan **`groupName`** dari grup tersebut diteruskan ke halaman berikutnya melalui URL.

**Langkah 5: `AssignmentListPage` (dan halaman detail lainnya)**
- **Pemicu:** Pengguna mengklik salah satu grup di `AssignmentGroupPage`.
- **Interaksi Store:** Tidak ada `action` yang dipanggil. Komponen ini hanya **membaca state** dari `dashboardStore` menggunakan `groupName` yang diterima untuk menampilkan daftar penugasan dalam grup tersebut.
- **Sumber Data:** **Hanya dari State `dashboardStore`**. Sama seperti langkah sebelumnya, halaman ini sangat cepat karena tidak ada interaksi jaringan atau database.
- **Data Kunci:** Tidak ada data kunci baru, karena semua data yang relevan sudah ada di `dashboardStore`.


--- END OF FILE: spec\data-flow-and-state-management.md ---



========================================================================
## FILE: spec\db.md
========================================================================

### **Spesifikasi Desain Database Lengkap (Versi Final)**

## 1. Ringkasan Eksekutif

Dokumen ini mendefinisikan struktur skema database lengkap untuk backend **Cerdas-SM (Survei Management)**, yang merupakan inti dari **Platform Cerdas**. Arsitektur ini dirancang untuk mendukung alur kerja multi-peran dalam lingkungan multi-tenant yang kompleks, di mana **`Satuan Kerja (Satker)`** berfungsi sebagai Tenant utama. Desain ini secara native mendukung kegiatan statistik berskala nasional yang melibatkan banyak Satker pelaksana.

Spesifikasi ini sepenuhnya terintegrasi dan dioptimalkan untuk:

- **Laravel 11+** sebagai kerangka kerja backend.
- **Filament v4** sebagai panel administrasi khusus peran administratif.
- **Filament Tenancy** untuk isolasi data yang ketat berbasis `Satker`.
- **`bezhanSalleh/filament-shield` v4** untuk manajemen peran dan izin yang dinamis dan kontekstual.

## 2. `app/Constants.php`

Sebuah kelas pusat untuk semua enum dan konstanta digunakan untuk memastikan konsistensi kode dan mencegah _magic strings_.

```php
<?php

namespace App;

class Constants
{
    // Nama Default untuk Roles (dikelola oleh Filament Shield)
    public const ROLE_SUPER_ADMIN = 'super_admin';
    public const ROLE_ADMIN_SATKER = 'admin_satker';
    public const ROLE_ADMIN_KEGIATAN = 'admin_kegiatan';
    public const ROLE_PML = 'PML';
    public const ROLE_PPL = 'PPL';

    // Status untuk Assignment Response
    public const STATUS_ASSIGNED = 'Assigned';
    public const STATUS_OPENED = 'Opened';
    public const STATUS_SUBMITTED_PPL = 'Submitted by PPL';
    public const STATUS_REJECTED_PML = 'Rejected by PML';
    public const STATUS_REJECTED_ADMIN = 'Rejected by Admin';
    public const STATUS_APPROVED_PML = 'Approved by PML';
    public const STATUS_APPROVED_ADMIN = 'Approved by Admin';

    public static function getResponseStatuses(): array
    {
        return [
            self::STATUS_ASSIGNED,
            self::STATUS_OPENED,
            self::STATUS_SUBMITTED_PPL,
            self::STATUS_REJECTED_PML,
            self::STATUS_REJECTED_ADMIN,
            self::STATUS_APPROVED_PML,
            self::STATUS_APPROVED_ADMIN,
        ];
    }
}
```

## 3. Skema Tabel Database

### 3.1. Tabel Tenancy, Pengguna, dan Peran

#### **`satkers` (Model Tenant)**

- **Model:** `App\Models\Satker`
- **Tujuan:** Menyimpan data Satuan Kerja. Bertindak sebagai Tenant utama dalam sistem.
- **Traits/Interfaces:** (Tidak ada, konfigurasi dilakukan di Panel Provider)
- **Columns:**

| Nama Kolom   | Tipe Data    | Kendala & Catatan                                     |
| :----------- | :----------- | :---------------------------------------------------- |
| `id`         | `uuid`       | Primary Key                                           |
| `name`       | `string`     | Nama lengkap Satker (e.g., "BPS Provinsi Jawa Barat") |
| `code`       | `string`     | Kode unik untuk Satker                                |
| `timestamps` | `timestamps` |                                                       |

#### **`users`**

- **Model:** `App\Models\User`
- **Tujuan:** Menyimpan akun pengguna individu. Setiap pengguna terafiliasi dengan satu Satker "induk".
- **Traits/Interfaces:** `use Spatie\Permission\Traits\HasRoles`
- **Columns:**

| Nama Kolom      | Tipe Data     | Kendala & Catatan                                                                                           |
| :-------------- | :------------ | :---------------------------------------------------------------------------------------------------------- |
| `id`            | `uuid`        | Primary Key                                                                                                 |
| `satker_id`     | `foreignUuid` | **`nullable`**. Terikat ke `satkers.id`. **Null untuk pengguna yang mendaftar mandiri dan belum direkrut.** |
| `name`          | `string`      | Nama lengkap pengguna.                                                                                      |
| `email`         | `string`      | `unique`.                                                                                                   |
| `password`      | `string`      | **`nullable`**. Menjadi null jika pengguna hanya login via Google.                                          |
| `google_id`     | `string`      | **`nullable`**, **`unique`**. ID unik dari provider OAuth (Google).                                         |
| `google_avatar` | `string`      | **`nullable`**. URL ke gambar avatar pengguna.                                                              |
| `timestamps`    | `timestamps`  |                                                                                                             |

> **Catatan Konseptual - Pengguna Mengambang (Floating Users):**
> Seorang `User` dapat ada di sistem dengan `satker_id` bernilai `NULL`. Ini terjadi ketika pengguna mendaftar mandiri melalui Google tetapi belum "direkrut" oleh admin_satker/Kegiatan manapun. Pengguna ini dapat login tetapi tidak memiliki akses ke data operasional apapun sampai mereka terafiliasi dengan sebuah Satker.

#### **Tabel yang Dibuat oleh `bezhanSalleh/filament-shield`**

- **Tabel:** `roles`, `permissions`, `model_has_roles`, `model_has_permissions`, `role_has_permissions`
- **Tujuan:** Dikelola sepenuhnya oleh paket Spatie/Shield untuk menangani sistem peran dan izin. Tidak perlu dibuat atau dimodifikasi secara manual.

### 3.2. Tabel Kegiatan & Keanggotaan

#### **`kegiatan_statistiks`**

- **Model:** `App\Models\KegiatanStatistik`
- **Tujuan:** Entitas global yang mendefinisikan sebuah proyek survei. Tidak terikat pada satu tenant, memungkinkan kegiatan berskala nasional.
- **Columns:**

| Nama Kolom          | Tipe Data    | Kendala & Catatan                                                      |
| :------------------ | :----------- | :--------------------------------------------------------------------- |
| `id`                | `uuid`       | Primary Key                                                            |
| `name`              | `string`     | Nama kegiatan (e.g., "Sensus Ekonomi 2026")                            |
| `year`              | `year`       | Tahun pelaksanaan                                                      |
| `start_date`        | `date`       | Tanggal mulai periode pendataan                                        |
| `end_date`          | `date`       | Tanggal selesai periode pendataan                                      |
| `extended_end_date` | `date`       | `nullable`                                                             |
| `form_schema`       | `json`       | Definisi lengkap formulir, termasuk validasi dan metadata `editableBy` |
| `form_version`      | `integer`    | `default(1)`. Dinaikkan setiap `form_schema` diperbarui                |
| `timestamps`        | `timestamps` |                                                                        |

#### Kendala & Catatan Tambahan:

#### Kendala & Catatan Tambahan:

Definisi lengkap formulir `form_schema`. **Skema ini juga harus berisi properti `masters_used` yang mendeklarasikan semua master data yang dibutuhkan oleh formulir ini**, menunjuk ke `type` dan `version` dari tabel `master_data`.

Selain itu, skema ini juga akan menyimpan konfigurasi untuk tampilan PWA agar sepenuhnya data-driven.

Properti baru yang penting dalam `form_schema` adalah **`assignment_label_template`**.

- **`assignment_label_template`** (opsional, string): Mendefinisikan format untuk label `Assignment` yang dibuat secara dinamis di PWA.
  - **Tujuan:** Memberikan nama yang informatif dan unik untuk setiap `Assignment` baru yang dibuat oleh PPL di lapangan, menggantikan nama generik.
  - **Mekanisme:** Template ini menggunakan placeholder dalam format `{field_id}`. PWA akan mengganti placeholder ini secara dinamis dengan nilai dari `responses` JSON.
  - **Contoh:** `"{nama_krt_final} - (Blok {level_5_code} No. Urut {nomor_urut_listing})"`
  - **Keterangan:** Field yang digunakan dalam template (seperti `nama_krt_final`) diharapkan diisi oleh `logicEngine` di PWA, yang dapat mengekstrak data dari lokasi mana pun dalam form, termasuk dari dalam roster yang kompleks. Label yang dihasilkan akan disimpan di kolom `assignments.assignment_label`.

Contoh:

```json
{
  "masters_used": [
    { "type": "KBLI", "version": 2020 },
    { "type": "WILAYAH_INDONESIA", "version": 1 }
  ],
  "assignment_label_template": "{nama_krt_final} - (Blok {level_5_code} No. Urut {nomor_urut_listing})",
  "level_definitions": {
    "level_1_code": "Provinsi",
    "level_2_code": "Kabupaten/Kota",
    "level_3_code": "Kecamatan",
    "level_4_code": "Desa/Kelurahan",
    "level_5_code": "SLS",
    "level_6_code": "Sub-SLS"
  },
  "assignment_table_grouping_levels": [
    "level_5_code",
    "level_4_code",
    "level_3_code",
    "level_2_code"
  ],
  "assignment_table_columns": [
    {
      "key": "assignment_label",
      "label": "Label Tugas",
      "type": "string",
      "default": true,
      "sortable": true,
      "filterable": true
    },
    {
      "key": "status",
      "label": "Status",
      "type": "status_lookup",
      "default": true,
      "sortable": true,
      "filterable": true
    },
    {
      "key": "responses.B1.R4",
      "label": "Jumlah ART",
      "type": "number",
      "default": false,
      "sortable": true,
      "filterable": true
    }
  ],
  "pages": [ ... ]
}
```

#### **`kegiatan_satkers` (Pivot)**

- **Model:** `App\Models\KegiatanSatker`
- **Tujuan:** Menghubungkan Kegiatan Statistik dengan Satker yang berpartisipasi (relasi many-to-many). Ini adalah dasar dari arsitektur multi-satker.
- **Columns:**

| Nama Kolom              | Tipe Data       | Kendala & Catatan                                      |
| :---------------------- | :-------------- | :----------------------------------------------------- |
| `id`                    | `bigIncrements` | Primary Key                                            |
| `kegiatan_statistik_id` | `foreignUuid`   | Terikat ke `kegiatan_statistiks.id`, `cascadeOnDelete` |
| `satker_id`             | `foreignUuid`   | Terikat ke `satkers.id`, `cascadeOnDelete`             |
| `timestamps`            | `timestamps`    |                                                        |

#### **`kegiatan_members` (Pivot)**

- **Model:** `App\Models\KegiatanMember`
- **Tujuan:** Menandakan partisipasi seorang pengguna dalam sebuah kegiatan. Peran (role) pengguna untuk kegiatan ini dikelola oleh Shield, bukan disimpan di sini.
- **Columns:**

| Nama Kolom              | Tipe Data       | Kendala & Catatan                                      |
| :---------------------- | :-------------- | :----------------------------------------------------- |
| `id`                    | `bigIncrements` | Primary Key                                            |
| `kegiatan_statistik_id` | `foreignUuid`   | Terikat ke `kegiatan_statistiks.id`, `cascadeOnDelete` |
| `user_id`               | `foreignUuid`   | Terikat ke `users.id`, `cascadeOnDelete`               |
| `timestamps`            | `timestamps`    |                                                        |

### **3.3. Konsep Kode Wilayah Berbasis Level (Konteks Penting)**

Untuk memastikan fleksibilitas sistem dalam menangani berbagai jenis survei (misalnya, survei rumah tangga, survei perusahaan, dll.), desain ini mengadopsi pendekatan abstrak untuk pengkodean wilayah. Alih-alih menggunakan nama kolom yang kaku seperti `province_code` atau `block_census_code`, sistem menggunakan hierarki generik: `level_1_code` hingga `level_6_code`.

- **Tujuan**: Untuk melepaskan keterikatan skema database dari struktur administrasi pemerintahan tertentu.
- **Konteks Umum**:
  - `level_1_code`: Biasanya merepresentasikan level tertinggi (e.g., Provinsi).
  - `level_2_code`: Level di bawahnya (e.g., Kabupaten/Kota).
  - `level_3_code`: Level di bawahnya (e.g., Kecamatan).
  - `level_4_code`: Level di bawahnya (e.g., Desa/Kelurahan).
  - `level_5_code`: Level unit pencacahan dasar (e.g., Satuan Lingkungan Setempat/SLS, Blok Sensus).
  - `level_6_code`: Level sub-unit dari level 5 (e.g., Sub-SLS, Sub-Blok Sensus).
- **Fleksibilitas**: Untuk survei yang tidak mengikuti struktur ini (misalnya, survei perusahaan di kawasan industri), level-level ini dapat dipetakan ke konsep yang berbeda tanpa mengubah skema database.
- **Sumber Data:** Validasi dan pemetaan kode ke nama wilayah dilakukan dengan merujuk pada tabel **`master_sls`**.
- **Fleksibilitas:**
  - Kolom `level_1_code` hingga `level_4_code` bersifat `nullable` untuk mengakomodasi penugasan yang tidak terikat lokasi administratif secara ketat.
  - Untuk unit pencacahan non-tradisional seperti **petak lahan pertanian**, `level_5_code` dan `level_6_code` dapat digunakan untuk menyimpan ID unik petak, sementara level di atasnya tetap diisi sesuai lokasi administratif lahan tersebut.

### 3.4. Tabel Data Operasional

#### **`assignments`**

- **Model:** `App\Models\Assignment`
- **Tujuan:** Tugas spesifik yang diberikan kepada PPL, di bawah pengawasan PML. Didefinisikan oleh hierarki wilayah kerja berbasis level.
- **Traits/Interfaces:** (Tidak ada, scoping ditangani otomatis oleh Filament)
- **Columns:**

| Nama Kolom              | Tipe Data     | Kendala & Catatan                                                                                          |
| :---------------------- | :------------ | :--------------------------------------------------------------------------------------------------------- |
| `id`                    | `uuid`        | Primary Key. Dihasilkan oleh klien (PWA) atau server.                                                      |
| `satker_id`             | `foreignUuid` | Terikat ke `satkers.id`.                                                                                   |
| `kegiatan_statistik_id` | `foreignUuid` | Terikat ke `kegiatan_statistiks.id`                                                                        |
| `ppl_id`                | `foreignUuid` | Terikat ke `users.id`.                                                                                     |
| `pml_id`                | `foreignUuid` | Terikat ke `users.id`.                                                                                     |
| `level_1_code`          | `string`      | `nullable`. Kode wilayah Level 1.                                                                          |
| `level_2_code`          | `string`      | `nullable`. Kode wilayah Level 2.                                                                          |
| `level_3_code`          | `string`      | `nullable`. Kode wilayah Level 3.                                                                          |
| `level_4_code`          | `string`      | `nullable`. Kode wilayah Level 4.                                                                          |
| `level_5_code`          | `string`      | `nullable`. Kode wilayah Level 5.                                                                          |
| `level_6_code`          | `string`      | `nullable`. Kode wilayah Level 6.                                                                          |
| `assignment_label`      | `string`      | Nama/label tugas yang mudah dibaca (e.g., "Rumah Tangga Budi", "PT Maju Jaya").                            |
| `prefilled_data`        | `json`        | `nullable`. Data pra-isi untuk diverifikasi/digunakan oleh petugas (e.g., `{"nama_krt": "Budi Santoso"}`). |
| `level_4_code_full`     | `string`      | `indexed`. Konkatenasi dari level 1-4. Untuk optimasi query/join.                                          |
| `level_6_code_full`     | `string`      | `nullable`, `indexed`. Konkatenasi dari level 1-6. Untuk optimasi query/join.                              |
| `timestamps`            | `timestamps`  |                                                                                                            |

- **Aturan Validasi Penting (Application-Level):**
- Saat membuat atau mengubah `Assignment`, sistem **wajib** memvalidasi bahwa `User` yang di-set sebagai `ppl_id` dan `pml_id` memiliki `satker_id` yang sama dengan `satker_id` dari `Assignment` itu sendiri.
- Saat membuat atau mengubah `Assignment`, sistem **wajib** melakukan validasi cakupan wilayah:
  1. Ambil `satker_id` dari `admin_kegiatan` yang sedang melakukan aksi.
  2. Ambil semua `wilayah_code_prefix` yang terasosiasi dengan `satker_id` tersebut dari tabel `satker_wilayah_tugas`.
  3. Pastikan `level_X_code_full` dari `Assignment` yang baru diawali dengan salah satu dari prefix yang diizinkan. Jika tidak, proses harus ditolak dengan pesan error.

#### **`assignment_attachments` (Baru)**

- **Model:** `App\Models\AssignmentAttachment`
- **Tujuan:** Menyimpan metadata untuk setiap file (foto, dokumen, dll.) yang diunggah dan terkait dengan sebuah assignment.
- **Columns:**

| Nama Kolom          | Tipe Data     | Kendala & Catatan                                          |
| :------------------ | :------------ | :--------------------------------------------------------- |
| `id`                | `uuid`        | Primary Key.                                               |
| `assignment_id`     | `foreignUuid` | Terikat ke `assignments.id`, `cascadeOnDelete`.            |
| `original_filename` | `string`      | Nama file asli saat diunggah oleh pengguna.                |
| `stored_path`       | `string`      | Path atau key unik file di layanan penyimpanan (e.g., S3). |
| `mime_type`         | `string`      | Tipe MIME dari file (e.g., 'image/jpeg').                  |
| `file_size_bytes`   | `integer`     | Ukuran file dalam bytes.                                   |
| `timestamps`        | `timestamps`  |                                                            |

#### **`assignment_responses`**

- **Model:** `App\Models\AssignmentResponse`
- **Tujuan:** Menyimpan data hasil wawancara yang dikumpulkan oleh PPL. Ini adalah entitas transaksional utama.
- **Columns:**

| Nama Kolom             | Tipe Data    | Kendala & Catatan                                                                             |
| :--------------------- | :----------- | :-------------------------------------------------------------------------------------------- |
| `assignment_id`        | `uuid`       | **Primary Key**. Sekaligus Foreign Key ke `assignments.id`, `cascadeOnDelete`.                |
| `status`               | `enum`       | Menggunakan nilai dari `Constants::getResponseStatuses()`                                     |
| `version`              | `integer`    | `default(1)`. Untuk _optimistic locking_ dengan PWA. Wajib diinkrementasi pada setiap update. |
| `form_version_used`    | `integer`    | Menyimpan versi form saat data diisi untuk keterlacakan.                                      |
| `responses`            | `json`       | `nullable`. Jawaban dari form dalam format `{"questionId": "answer"}`.                        |
| `submitted_by_ppl_at`  | `timestamp`  | `nullable`                                                                                    |
| `reviewed_by_pml_at`   | `timestamp`  | `nullable`                                                                                    |
| `reviewed_by_admin_at` | `timestamp`  | `nullable`                                                                                    |
| `timestamps`           | `timestamps` |                                                                                               |

#### **`response_histories` (Audit Trail)**

- **Model:** `App\Models\ResponseHistory`
- **Tujuan:** Mencatat setiap perubahan status pada `assignment_responses` untuk keterlacakan penuh dan akuntabilitas.
- **Columns:**

| Nama Kolom               | Tipe Data       | Kendala & Catatan                                                  |
| :----------------------- | :-------------- | :----------------------------------------------------------------- |
| `id`                     | `bigIncrements` | Primary Key                                                        |
| `assignment_response_id` | `foreignUuid`   | Terikat ke `assignment_responses.assignment_id`, `cascadeOnDelete` |
| `user_id`                | `foreignUuid`   | Terikat ke `users.id`. Pengguna yang melakukan aksi.               |
| `from_status`            | `string`        | `nullable`                                                         |
| `to_status`              | `string`        |                                                                    |
| `notes`                  | `text`          | `nullable`. Wajib diisi saat status adalah `Rejected...`.          |
| `created_at`             | `timestamp`     |                                                                    |

#### **`app_metadata` (Baru)**

- **Model:** (Tidak memerlukan model Eloquent, dikelola oleh PWA)
- **Tujuan:** Menyimpan data konfigurasi atau metadata sisi klien dalam format key-value yang persisten di IndexedDB. Contohnya, menyimpan timestamp sinkronisasi terakhir per kegiatan.
- **Columns:**

| Nama Kolom | Tipe Data | Kendala & Catatan                                     |
| :--------- | :-------- | :---------------------------------------------------- |
| `key`      | `string`  | Primary Key. Contoh: `lastSyncTimestamp_kegiatan_123` |
| `value`    | `any`     | Nilai yang disimpan (bisa string, number, object).    |

#### **`master_sls`**

- **Model:** `App\Models\MasterSls`
- **Tujuan:** Menyimpan data master hierarki wilayah administratif dari level provinsi hingga SLS/Sub-SLS. Tabel ini berfungsi sebagai sumber kebenaran (source of truth) untuk validasi kode wilayah dan menampilkan nama wilayah di antarmuka.
- **Columns:**

| Nama Kolom    | Tipe Data       | Kendala & Catatan   |
| :------------ | :-------------- | :------------------ |
| `id`          | `bigIncrements` | Primary Key         |
| `prov_id`     | `string`        | Kode Provinsi       |
| `kabkot_id`   | `string`        | Kode Kabupaten/Kota |
| `kec_id`      | `string`        | Kode Kecamatan      |
| `desa_kel_id` | `string`        | Kode Desa/Kelurahan |
| `sls_id`      | `string`        | Kode SLS/Sub-SLS    |
| `provinsi`    | `string`        | Nama Provinsi       |
| `kabkot`      | `string`        | Nama Kabupaten/Kota |
| `kecamatan`   | `string`        | Nama Kecamatan      |
| `desa_kel`    | `string`        | Nama Desa/Kelurahan |
| `nama`        | `string`        | Nama SLS/Sub-SLS    |
| `timestamps`  | `timestamps`    |                     |

#### **`master_data` (Final)**

- **Model:** `App\Models\MasterData`
- **Tujuan:** Berfungsi sebagai _document store_ untuk mengelola dataset master yang besar dan kompleks (seperti KBLI) sebagai satu unit yang utuh dan berversi. Pendekatan ini memprioritaskan kesederhanaan manajemen dan integritas dataset. **Seluruh logika pencarian dan pemfilteran pada data ini terjadi di sisi klien (PWA).**
- **Columns:**

| Nama Kolom    | Tipe Data        | Kendala & Catatan                                                                             |
| :------------ | :--------------- | :-------------------------------------------------------------------------------------------- |
| `id`          | `bigIncreaments` | Primary Key                                                                                   |
| `type`        | `string`         | Tipe/kategori master data (e.g., 'KBLI', 'WILAYAH_INDONESIA').                                |
| `version`     | `integer`        | Versi dari master data ini (e.g., 2020).                                                      |
| `description` | `string`         | `nullable`. Deskripsi singkat (e.g., "Klasifikasi Baku Lapangan Usaha Indonesia 2020").       |
| `data`        | `json`           | **Penting.** Seluruh dataset master dalam format JSON yang berisi struktur hierarkis lengkap. |
| `is_active`   | `boolean`        | `default(true)`. Menandakan apakah versi ini yang aktif digunakan untuk `type` ini.           |
| `timestamps`  | `timestamps`     |                                                                                               |

- **Kendala Unik (Unique Constraint):** Kombinasi `(type, version)` harus unik untuk memastikan tidak ada duplikasi versi pada tipe master data yang sama.

#### **`satker_wilayah_tugas` (BARU)**

- **Model:** `App\Models\SatkerWilayahTugas`
- **Tujuan:** Memetakan setiap Satker ke satu atau lebih prefix kode wilayah yang menjadi tanggung jawabnya. Ini adalah tabel aturan bisnis inti untuk validasi cakupan wilayah.
- **Columns:**

  | Nama Kolom            | Tipe Data       | Kendala & Catatan                                                               |
  | :-------------------- | :-------------- | :------------------------------------------------------------------------------ |
  | `id`                  | `bigIncrements` | Primary Key                                                                     |
  | `satker_id`           | `foreignUuid`   | Terikat ke `satkers.id`, `cascadeOnDelete`.                                     |
  | `wilayah_level`       | `integer`       | Level wilayah yang menjadi basis (1=Prov, 2=Kab/Kota, 3=Kec, dst.).             |
  | `wilayah_code_prefix` | `string`        | Prefix kode wilayah. Contoh: '61' untuk Prov Kalbar, '6102' untuk Kab Mempawah. |
  | `timestamps`          | `timestamps`    |                                                                                 |

**Contoh Isi Tabel `satker_wilayah_tugas`:**

| satker_id                 | wilayah_level | wilayah_code_prefix | Deskripsi                                                                              |
| :------------------------ | :------------ | :------------------ | :------------------------------------------------------------------------------------- |
| (ID Satker Kab. Mempawah) | 2             | `6102`              | Satker Kab. Mempawah bertanggung jawab atas semua wilayah yang kodenya diawali '6102'. |
| (ID Satker Prov. Kalbar)  | 1             | `61`                | Satker Prov. Kalbar bertanggung jawab atas semua wilayah yang kodenya diawali '61'.    |
| (ID Satker BPS Pusat)     | 0             | `*`                 | Satker Pusat (jika ada) bisa mengakses semua wilayah (wildcard).                       |


--- END OF FILE: spec\db.md ---



========================================================================
## FILE: spec\dynamic-form-engine.md
========================================================================

# Dynamic Form Engine Specification

## 1. Overview

This document specifies the functionality of the dynamic form engine for the Cerdas Mobile PWA. The engine's primary responsibility is to render an interactive survey form based on a JSON schema (`form_schema`). It must be flexible, support complex validation and conditional logic, and work seamlessly in an offline-first environment.

## 2. Schema Structure (`form_schema.json`)

The form is defined by a single JSON object.

### 2.1. Top-Level Properties

| Key                                | Type     | Description                                                                                             |
| ---------------------------------- | -------- | ------------------------------------------------------------------------------------------------------- |
| `form_name`                        | `string` | The display name of the form.                                                                           |
| `form_version`                     | `integer`| The version number of this schema. Incremented for every change.                                        |
| `masters_used`                     | `array`  | An array of master data keys (e.g., `[{ "type": "KBLI", "version": 1 }]`) required by the form.         |
| `level_definitions`                | `object` | Maps generic level codes (`level_1_code`) to human-readable names (`Provinsi`).                         |
| `assignment_table_grouping_levels` | `array`  | Defines the hierarchy for grouping assignments in the summary view.                                     |
| `assignment_table_columns`         | `array`  | Defines the columns to show in the assignment list view.                                              |
| `pages`                            | `array`  | An array of `Page` objects, defining the form's pagination and structure.                               |

### 2.2. Question Definition

Each question is an object with the following properties:

| Key                | Type      | Description                                                                                             |
| ------------------ | --------- | ------------------------------------------------------------------------------------------------------- |
| `id`               | `string`  | A unique identifier for the question within the form (e.g., `nama_krt`).                                |
| `type`             | `string`  | The input type. See Section 2.3 for a full list.                                                        |
| `label`            | `string`  | The question text displayed to the user.                                                                |
| `placeholder`      | `string`  | (Optional) Placeholder text for the input field.                                                        |
| `options`          | `array`   | (For `select`, `radio`) An array of `{ "label": string, "value": any }` objects.                        |
| `validation`       | `object`  | See Section 5.                                                                                          |
| `conditionalLogic` | `object`  | See Section 3.                                                                                          |
| `editableBy`       | `array`   | An array of user roles (e.g., `['PPL', 'PML']`) that can edit this field.                               |
| `...`              | `any`     | Other properties specific to the question type.                                                         |

### 2.3. Question Types

The engine must support the following types:

-   **`text`**: A standard single-line text input.
-   **`number`**: A text input with `type="number"`.
-   **`textarea`**: A multi-line text input.
-   **`select`**: A dropdown list.
-   **`radio`**: A list of radio buttons.
-   **`image`**: An image input.
    -   Must have a `source` property, an array containing one or both of `'camera'` and `'gallery'`.
-   **`geotag`**: A button that captures GPS coordinates.
    -   Can have a `min_accuracy` property (in meters) to enforce a minimum GPS accuracy.
-   **`prefilled_display`**: A read-only field to display data from the `prefilled_data` object of an assignment.
-   **`roster`**: A repeating group of questions.
    -   **Schema:** `{"type": "roster", "id": "anggota_rumah_tangga", "item_label": "Anggota Rumah Tangga", "questions": [ ...nested questions... ]}`
    -   The `questions` array contains a full set of question definitions for a single roster item.
    -   Rosters can be nested within other rosters.
-   **`dynamic_roster_add_button`**: A button that allows the PPL to add a new top-level roster item (e.g., a new family) to the current assignment. This is specifically for scenarios like Listing where new entities are discovered in the field.

## 3. Advanced Logic Engine

To provide maximum flexibility, conditional logic will be defined by a string containing a JavaScript function body. This function will be executed within a sandboxed environment with a controlled `context` object.

-   **Properties:** `showIf`, `requiredIf`, `validation.custom`, and `options.filter` will all accept a function string.
-   **Example:** `"showIf": "return context.get('ada_balita') === 'ya'"`

### 3.1. The `context` Object

The executed function will receive a single argument, `context`, which provides safe access to the form's state.

-   `context.get(questionId: string): any`: Gets the value of a question within the current scope (the current form or the current roster item).
-   `context.getRootValue(questionId: string): any`: Gets the value of a question from the top-level (non-roster) part of the form.
-   `context.getParent(): object | null`: Returns the `context` object for the parent roster item, allowing access to parent data from within a nested roster.
-   `context.getRoster(rosterId: string): object[]`: Gets an array of all data objects for a given roster, allowing for aggregate checks (e.g., counting items that meet a condition).

## 4. Dynamic Assignment Labels

To significantly improve user experience for PPLs creating new assignments in the field, the engine supports dynamically generating the `assignment_label` based on user input. This replaces generic labels like "Penugasan Baru" with meaningful, identifiable names in real-time.

### 4.1. Schema Configuration

The feature is controlled by the `assignment_label_template` property in the `form_schema` (see `spec/db.md`).

-   **`assignment_label_template`**: A string that defines the format of the label, using placeholders for field IDs from the `responses` object.
-   **Example**: `"{nama_krt_final} - (Blok {level_5_code} No. Urut {nomor_urut_listing})"`

### 4.2. Core Mechanism: Logic Engine Integration

This feature's power comes from its integration with the **Advanced Logic Engine** (Section 3), not from a complex new template-parsing language. The placeholders in the template (e.g., `{nama_krt_final}`) should correspond to simple, top-level field IDs in the `responses` object.

The complex work of deriving the values for these placeholders is the responsibility of the form's logic engine.

**Workflow:**

1.  **Data Extraction:** The survey designer uses the existing `logicEngine` capabilities to define rules that extract and compute data. This can include complex scenarios like finding a specific member in a roster.
2.  **Populate Placeholder Fields:** The logic engine's rules will populate the top-level fields that are used by the template. For example, a rule might be: "Find the person in the `anggota_rumah_tangga` roster where `hubungan_dengan_krt` is 'Kepala Keluarga', and copy their `nama_art` value into the top-level `nama_krt_final` field." Another rule could copy the second roster member's name into `nama_art_kedua`.
3.  **Template Composition:** The frontend UI layer (specifically `InterviewFormPage.vue` and its store) watches for any changes to the fields used in the `assignment_label_template` (e.g., `nama_krt_final`, `level_5_code`, etc.).
4.  **Reactive Update:** When any of these watched fields change, the PWA immediately re-evaluates the template string, substituting the placeholders with their current values.
5.  **Persistence:** The newly generated string is saved as the `assignment_label` property of the `Assignment` object in the local IndexedDB. This ensures the change is immediately reflected in the `AssignmentListPage` and persists across sessions.

### 4.3. Example Implementation

**Scenario:** The user wants the label to be `"{nama_kepala_rumah_tangga} / {the_second_art_in_roster}"`.

1.  **Schema Setup:**
    -   `assignment_label_template` is set to `"{krt_name} / {second_art_name}"`.
2.  **Logic Engine Rules (Conceptual):**
    -   A rule is defined that triggers when `anggota_rumah_tangga` changes. It finds the object where `hubungan_dengan_krt === 'Kepala Keluarga'` and copies its `nama_art` value to the top-level `responses.krt_name`.
    -   Another rule is defined that triggers when `anggota_rumah_tangga` changes. It takes the object at index `1` from the roster and copies its `nama_art` value to `responses.second_art_name`.
3.  **PWA Behavior:**
    -   PPL opens a new form. The label is initially " / ".
    -   PPL adds the first household member, "Budi", and marks him as "Kepala Keluarga". The logic engine runs, and `responses.krt_name` becomes "Budi". The assignment label reactively updates to "Budi / ".
    -   PPL adds the second household member, "Ani". The logic engine runs, and `responses.second_art_name` becomes "Ani". The assignment label updates to "Budi / Ani".

This architecture keeps the template mechanism simple while leveraging the already-specified power of the logic engine for complex data derivation, ensuring the system is both powerful and maintainable.

## 5. Schema Versioning

1.  **Detection:** Before displaying a list of assignments, the PWA will check if the `form_schema` version stored locally matches the version from the server.
2.  **Notification:** If a newer version exists, a blocking pop-up will be shown on the **Activity Dashboard Page**, informing the user that an update is required before they can proceed.
3.  **Data Migration:** When a user opens a form with a new schema, the PWA will attempt to map the old response data to the new schema. Data for questions whose `id` no longer exists in the new schema will be moved to a special `_archivedData` object within the `responses` JSON blob for audit purposes.

## 6. Validation & Summary Feature

### 6.1. Validation Rules

The `validation` object on a question will define its rules.

-   `"required": true`: The field cannot be empty.
-   `"requiredIf": string`: A JavaScript function string (see Section 3) that makes the field required only if the logic returns `true`.
-   `"minLength": number`, `"maxLength": number`: For text.
-   `"min": number`, `"max": number`: For numbers.
-   `"custom": string`: A JavaScript function string (see Section 3) that returns `true` if valid, or a `string` error message if invalid.
-   `"level": "error" | "warning"`: (Optional) Defaults to `"error"`. An `"error"` blocks submission. A `"warning"` does not.

### 6.2. Inline Validation

To provide a smooth user experience, inline validation messages (the error or warning text appearing below a field) **must** only be displayed after the user has interacted with and left the field. This is typically handled by triggering the validation check on the input's `blur` event.

### 6.3. Summary Feature

1.  **UI:** A floating action button will be present on the form page. Clicking this button opens a **Popup** or **Modal** dialog that displays the total counts for the three validation categories (e.g., `Errors: 2, Warnings: 1, Blank: 5`).
2.  **Logic:**
    -   **Error:** A field is an error if it fails a validation rule with `level: "error"`.
    -   **Warning:** A field is a warning if it fails a validation rule with `level: "warning"`.
    -   **Blank:** A field is blank if it is currently visible on the form, is not `required` (or `requiredIf` is not met), and is empty.
3.  **Interaction Flow:**
    -   Clicking a category in the summary popup (e.g., "Errors") that has a count greater than zero will close the popup.
    -   Immediately after, a **Sheet** will slide up from the bottom of the screen.
    -   This sheet will contain a list of all the specific questions belonging to the selected category.
    -   Clicking on a question in the sheet will smoothly scroll the main form to that specific question, focusing it if possible. This includes scrolling to questions within a nested roster.

### 6.4. Roster Validation IDs

To uniquely identify each question within a repeating roster, the validation engine will use a dot-notation path for question IDs. This path is constructed as `rosterId.index.questionId`.

-   **Example:** For a roster with `id: "anggota_rumah_tangga"`, the `nama_art` question for the first person in the roster will have a validation ID of `anggota_rumah_tangga.0.nama_art`.

### 6.5. PPL Final Visit Status
(This feature is implemented as a question type within the form schema, typically a 'select' or 'radio' input.)

The form must provide a mechanism for PPLs to record the final outcome of a visit, distinct from submission. This will typically be a select input or a set of radio buttons with predefined options (e.g., 'Selesai Dicacah', 'Responden Menolak', 'Keluarga Pindah', 'Rumah Kosong', 'Tidak Ditemukan').
If a status other than 'Selesai Dicacah' is selected, the remaining questions in the form should be disabled, and an optional notes field may be required.

### 6.6. PPL New Assignment Creation

For details on the PPL New Assignment Creation feature, including its functional and technical specifications, please refer to the dedicated document: **`ppl-new-assignment-creation.md`**.

## 7. Dynamic Assignment List Rendering

This section specifies the functionality for rendering a dynamic, interactive table on the `AssignmentListPage.vue`, driven by the `assignment_table_columns` property of the `form_schema`.

### 6.1. Column Configuration

The behavior and appearance of the assignment list are controlled by the array of column objects in `assignment_table_columns`. For the detailed structure of a column object, refer to the `kegiatan_statistiks` table definition in `spec/db.md`. The key properties are:

-   `key`: A dot-notation path to the data within the assignment or its response (e.g., `prefilled.nama_krt`, `responses.B1.R4`).
-   `label`: The column header text.
-   `type`: The data type (`string`, `number`, `date`, `boolean`, `status_lookup`) used for formatting, sorting, and filtering.
-   `default`: A boolean indicating if the column should be visible in the default, collapsed row view.
-   `sortable`: A boolean indicating if the list can be sorted by this column.
-   `filterable`: A boolean indicating if the column can be used for filtering.

**Column Order:** The display order of columns in the table is determined by the order of objects in the `assignment_table_columns` array.

### 6.2. UI Layout: Accordion Table

The assignment list will be rendered as an "accordion table" to accommodate a large number of columns on a mobile screen.

-   **Default (Collapsed) View:** Each assignment is a single row displaying only the columns marked with `"default": true`.
-   **Expanded View:** Clicking anywhere on a row expands that row to reveal a vertical list of all other available columns for that assignment, displayed as "Label: Value" pairs.

### 6.3. Sorting

-   If a column is marked as `"sortable": true`, its header in the table will be interactive.
-   Tapping a header will sort the entire list of assignments by that column's value.
-   Tapping the same header again will reverse the sort order (ascending/descending).
-   All sorting will be performed client-side on the data available in the `dashboardStore` for instant feedback.

### 6.4. Filtering

-   A "Filter" button will be present on the `AssignmentListPage`.
-   Tapping this button will open a modal dialog for building a filter query.
-   The user can add one or more filter conditions.
-   For each condition, the user selects a field from a list of all columns marked `"filterable": true`.
-   The UI for entering the filter value will adapt based on the column's `type`:
    -   `string`: A text input for "contains" filtering.
    -   `number`, `date`: Inputs for a numeric or date range.
    -   `boolean`, `status_lookup`: A dropdown list for selecting one or more predefined values.
-   All filtering will be performed client-side.

### 6.5. User Preferences

-   To enhance usability, user preferences for the assignment list will be stored locally.
-   This includes which columns are toggled for the default view and the current sort order.
-   These preferences will be saved in the `app_metadata` table in IndexedDB, keyed by the activity ID, ensuring they persist between sessions for each specific activity.

### 6.6. Search

-   To provide quick access, a real-time search functionality is implemented directly on the `AssignmentListPage`.
-   **UI:** A search icon in the navbar enables an expandable search bar.
-   **Logic:** The search is performed client-side as the user types. It is case-insensitive and matches the search term against the values of all columns marked as `"filterable": true` in the `form_schema`.
-   This allows users to rapidly find assignments by typing any relevant information, such as a family name, status, or any other data point made filterable in the schema.

--- END OF FILE: spec\dynamic-form-engine.md ---



========================================================================
## FILE: spec\ppl-new-assignment-creation.md
========================================================================

# Specification: PPL New Assignment Creation

## 1. Overview

This document details the full implementation of the "PPL New Assignment Creation" feature, allowing PPLs to create new top-level assignments directly from the PWA. This feature is designed with a strong emphasis on **offline-first capabilities** and **immediate local visibility** of newly created assignments. It aligns with "Scenario A: Penambahan Unit Observasi Baru di Lapangan (Saat Listing)" described in `studi-kasus-kegiatan.md`.

The revised flow involves navigating directly to the `InterviewFormPage.vue` in a "create mode". As the PPL enters data, the **assignment's label is dynamically generated** based on a pre-defined template in the form's schema, replacing generic names with meaningful identifiers in real-time. The photo handling follows a two-step process: photos are uploaded separately to a media endpoint, and only the photo ID is referenced in the assignment data. Crucially, newly created assignments—with their dynamically generated labels—are immediately saved to the local IndexedDB and are visible in the `AssignmentListPage`.

## 2. Functional Requirements

*   PPLs must be able to initiate the creation of a new assignment from the `AssignmentListPage.vue`.
*   A Floating Action Button (FAB) will be displayed on `AssignmentListPage.vue` if the `Kegiatan Statistik` allows new assignment creation.
*   Clicking the FAB will navigate directly to `InterviewFormPage.vue` in a "create mode".
*   The `InterviewFormPage.vue` will initialize a new, empty assignment with a `PENDING` status and a default label (e.g., "Penugasan Baru").
*   **Dynamic Labeling:** As the PPL enters data, the `assignment_label` must be automatically and reactively updated based on the `assignment_label_template` defined in the `form_schema`. (See `spec/dynamic-form-engine.md` for details).
*   Geographical data for the new assignment will be pre-filled based on the context from which it was created.
*   The process must support full offline operation.
*   The newly created assignment, with its dynamically updated label, should appear in the PPL's assignment list immediately after local creation.
*   Only PPLs are allowed to create new assignments.

## 3. Technical Specification

### 3.1. Frontend Changes

#### 3.1.1. `frontend-pwa/src/views/InterviewFormPage.vue`

*   **Purpose:** Handle the creation of new assignments, data collection, and dynamic label generation.
*   **Changes:**
    *   Detect "create mode" from route parameters.
    *   If in "create mode", call `formStore.initializeNewAssignment`.
    *   **Watch for changes** in any of the fields used as variables in the `form_schema.assignment_label_template`.
    *   On change, call a new action in the `formStore` (e.g., `updateAssignmentLabel`) to trigger the re-computation and saving of the new label.

#### 3.1.2. `frontend-pwa/src/js/stores/formStore.ts`

*   **Purpose:** Handle the business logic for initializing, saving, and submitting new assignments, including their dynamic labels.
*   **Changes:**
    *   The `initializeNewAssignment` action will create a new assignment object with a default `assignment_label` (e.g., "Penugasan Baru"), save it to Dexie.js, and add it to the `dashboardStore` for UI reactivity.
    *   A new **`updateAssignmentLabel`** action will be created. This action will:
        1.  Get the current `assignment_label_template` from the active `form_schema`.
        2.  Get the current `responses` object for the form.
        3.  Use the `logicEngine` to resolve any complex/derived placeholder values (e.g., finding the KRT's name from a roster and putting it in a top-level `krt_name` field).
        4.  Substitute the placeholders in the template with their corresponding values from the `responses`.
        5.  Update the `assignment_label` on the `Assignment` object in the store.
        6.  Debounce the save operation to Dexie.js to persist the new label efficiently.

#### 3.1.3. `frontend-pwa/src/js/stores/dashboardStore.ts`

*   **Purpose:** Provide activity data and facilitate immediate local visibility.
*   **Changes:**
    *   No major changes are required for the dynamic label feature itself, as the reactivity is handled through the `Assignment` object which is already in its `assignments` array. When the `assignment_label` is updated by the `formStore`, the change will be reflected automatically in `AssignmentListPage.vue`.

(Other sections of the technical specification remain largely the same, as the dynamic label is primarily a frontend logic enhancement before data submission.)

## 4. Offline Support and Synchronization

*   The entire dynamic labeling process is designed to work **offline by default**, as it only involves the `form_schema` and data already present on the client.
*   The `SyncEngine` will simply submit the final, generated `assignment_label` to the backend as part of the `createAssignment` payload. No changes to the sync process are required.

## 5. Testing Considerations

*   **Unit Tests:**
    *   `formStore.ts`: Test the `updateAssignmentLabel` action thoroughly. Verify that it correctly parses templates, handles missing values gracefully, and correctly derives complex values from rosters via the logic engine.
*   **Integration Tests:**
    *   Verify that as a user types into a field that is part of the label template, the label in the `AssignmentListPage` updates in real-time.
    *   Test with complex templates that involve both simple fields and fields derived from roster logic.
*   **Manual Testing:**
    *   End-to-end flow: Create a new assignment and ensure its name changes as expected while filling out the form.
    *   Verify the updated label persists after closing and reopening the app before submission.

--- END OF FILE: spec\ppl-new-assignment-creation.md ---



========================================================================
## FILE: spec\studi-kasus-kegiatan.md
========================================================================

### **Spesifikasi Studi Kasus: Implementasi Kegiatan Statistik (Regsosek 2022)**

## 1. Pendahuluan

Dokumen ini berfungsi sebagai **spesifikasi fungsional dan rujukan utama (blueprint)** untuk pengembangan fitur-fitur inti dalam **Platform Cerdas**. Dengan memodelkan kegiatan **Registrasi Sosial Ekonomi (Regsosek) 2022**, dokumen ini menguraikan persyaratan fungsional, skenario operasional, dan kapabilitas yang harus dimiliki oleh Platform Cerdas untuk dapat mengakomodasi kegiatan statistik modern yang kompleks.

Dokumen ini secara spesifik menguraikan bagaimana Platform Cerdas harus menangani kegiatan multi-tahap yang saling bergantung:

1.  **Tahap 1: Listing (Pencacahan Awal)**: Menggunakan kuesioner ringkas untuk mendaftar semua keluarga, dilengkapi dengan bukti geotagging dan foto.
2.  **Tahap 2: Pendataan (Pendataan Detail)**: Menggunakan kuesioner komprehensif untuk mengumpulkan data sosial-ekonomi dari keluarga yang telah terdaftar.

Setiap persyaratan yang diuraikan di sini harus menjadi acuan dalam pembuatan _user stories_, desain teknis, dan pengujian fitur di **Cerdas Mobile (PWA)** dan **Cerdas-SM (Backend)**.

Studi kasus ini akan menguraikan bagaimana kedua tahapan tersebut dimodelkan sebagai dua entitas `Kegiatan Statistik` yang terpisah namun saling berhubungan, dan bagaimana Platform Cerdas harus mampu mengakomodasi dua jenis kuesioner yang berbeda secara fundamental.

## 2. Atribut Umum Kegiatan Statistik

Setiap kegiatan statistik, terlepas dari jenisnya, akan memiliki serangkaian atribut dasar yang mendefinisikannya. Berikut adalah pemetaan atribut-atribut ini menggunakan Regsosek 2022 sebagai contoh.

| Atribut              | Deskripsi / Contoh (Regsosek 2022)                                                                                                                                                                                        | Implikasi Teknis di Platform Cerdas                                                                                                                                                                            |
| :------------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Nama Kegiatan**    | Registrasi Sosial Ekonomi 2022                                                                                                                                                                                            | Dicatat di `kegiatan_statistiks.name`. Akan ada dua record: `REGSOSEK 2022 - LISTING` dan `REGSOSEK 2022 - PENDATAAN`.                                                                                         |
| **Tahun**            | 2022                                                                                                                                                                                                                      | Dicatat di `kegiatan_statistiks.year`.                                                                                                                                                                         |
| **Deskripsi**        | Pendataan seluruh penduduk Indonesia untuk membangun basis data sosial ekonomi tunggal yang akan digunakan untuk program perlindungan sosial dan pemberdayaan masyarakat.                                                 | Dicatat di kolom deskripsi (jika ada) atau sebagai bagian dari dokumentasi internal.                                                                                                                           |
| **Metodologi**       | Wawancara tatap muka dari rumah ke rumah (door-to-door) menggunakan metode **CAPI (Computer-Assisted Personal Interviewing)**.                                                                                            | Platform Cerdas secara native mendukung ini melalui **Cerdas Mobile (PWA)**.                                                                                                                                   |
| **Cakupan**          | **Sensus** (pencacahan lengkap/full enumeration) seluruh penduduk di wilayah Indonesia.                                                                                                                                   | Sistem harus mampu menangani volume data yang sangat besar. Skalabilitas backend dan efisiensi database lokal (DexieJS) menjadi krusial.                                                                       |
| **Unit Observasi**   | **Keluarga** atau **Rumah Tangga**.                                                                                                                                                                                       | Satu `Assignment` dapat merepresentasikan satu unit observasi (misalnya, satu rumah tangga target), atau satu wilayah kerja kecil (misalnya, satu SLS) di mana PPL akan mengidentifikasi semua unit observasi. |
| **Unit Analisis**    | **Keluarga** dan **Individu** (anggota keluarga).                                                                                                                                                                         | Data `responses` dalam `assignment_responses` akan berisi struktur data (misalnya, roster) untuk menampung informasi per individu dalam satu keluarga.                                                         |
| **Periode Lapangan** | Oktober - November 2022                                                                                                                                                                                                   | Dicatat di `kegiatan_statistiks.start_date` dan `end_date`.                                                                                                                                                    |
| **Indikator Utama**  | Terwujudnya "Satu Data" program perlindungan sosial, data target untuk program pemerintah (seperti PKH, BLT), kondisi perumahan, sanitasi, tingkat pendidikan, ketenagakerjaan, kepemilikan aset, dan demografi penduduk. | `form_schema` harus dirancang untuk dapat menangkap semua variabel yang dibutuhkan untuk menghasilkan indikator-indikator ini.                                                                                 |

## 3. Fase 1: Kegiatan `REGSOSEK 2022 - LISTING`

Ini adalah tahap pertama yang dimodelkan sebagai `Kegiatan Statistik` mandiri di dalam sistem. Kuesioner untuk fase ini bersifat ringkas dan fokus pada identifikasi.

### 3.1. Tujuan Spesifik

- Mengidentifikasi dan mendaftar semua bangunan, rumah tangga, dan keluarga yang ada di dalam satu Satuan Lingkungan Setempat (SLS).
- Mengumpulkan informasi dasar untuk setiap keluarga.
- Merekam koordinat geografis (**geotag**) dan mengambil **foto depan** setiap bangunan tempat tinggal untuk verifikasi dan pemetaan.
- Menghasilkan _prelist_ atau kerangka kerja yang valid, lengkap, dan terverifikasi secara spasial untuk digunakan pada fase pendataan detail.

### 3.2. Alur Kerja di Platform Cerdas

1.  **Persiapan (Admin Kegiatan di Filament):**

    - `admin_kegiatan` membuat `Kegiatan Statistik` **"REGSOSEK 2022 - LISTING"**.
    - Sebuah `form_schema` (kuesioner) yang spesifik untuk Listing dikembangkan dan diunggah ke dalam kegiatan ini. Secara konseptual, kuesioner ini harus mampu menangkap beberapa blok informasi kunci:
      - **Informasi Identitas Keluarga:** Variabel untuk nama Kepala Keluarga, alamat, dan jumlah anggota keluarga.
      - **Informasi Geospasial:** Sebuah field dengan tipe khusus "geotag" yang memungkinkan PWA mengakses GPS perangkat.
      - **Informasi Visual:** Sebuah field dengan tipe khusus "foto" yang memungkinkan PWA mengakses kamera perangkat.

2.  **Pelaksanaan (PPL di Cerdas Mobile):**

    - PPL mengunduh `Assignment` yang merepresentasikan satu wilayah SLS.
    - Untuk setiap keluarga yang ditemui, PPL membuat entri data baru.
    - **Pengambilan Geotag:** Saat PPL berinteraksi dengan field geotag, PWA akan mengambil data `latitude`, `longitude`, dan `accuracy` dari perangkat.
    - **Pengambilan Foto:** Saat PPL berinteraksi dengan field foto, PWA akan membuka kamera. Setelah foto diambil dan dioptimalkan, PWA akan menanganinya untuk sinkronisasi.
    - **Proses Sinkronisasi Foto:** Proses `SyncEngine` harus cerdas. Ia akan mengunggah file foto ke endpoint media khusus. Server akan menyimpan file tersebut dan mengembalikan sebuah ID unik. `SyncEngine` kemudian akan memperbarui data respons dengan ID referensi ini. Hasilnya, `responses` akan menyimpan _referensi unik_ (misalnya, sebuah ID) ke file foto yang telah diunggah, bukan file foto itu sendiri. (Lihat `AssignmentPhotoController`)

3.  **Output & Hasil Akhir:**
    - Hasil dari fase Listing adalah `assignment_responses` yang bersih dan tervalidasi, di mana setiap record berisi data identitas keluarga, objek koordinat geospasial, dan ID referensi ke file foto.

## 4. Fase 2: Kegiatan `REGSOSEK 2022 - PENDATAAN`

Ini adalah tahap pendataan detail yang memanfaatkan output kaya dari fase pertama dan menggunakan kuesioner yang jauh lebih komprehensif.

### 4.1. Tujuan Spesifik

- Melakukan wawancara mendalam dengan setiap keluarga yang telah terdaftar pada fase Listing.
- Mengumpulkan data sosial dan ekonomi yang komprehensif untuk menghasilkan indikator-indikator pembangunan.

### 4.2. Alur Kerja di Platform Cerdas

1.  **Persiapan (Admin Kegiatan di Filament):**

    - `admin_kegiatan` membuat `Kegiatan Statistik` **"REGSOSEK 2022 - PENDATAAN"**.
    - `form_schema` (kuesioner) yang **sangat detail dan kompleks** untuk pendataan dikembangkan dan diunggah ke dalam kegiatan ini. Kuesioner ini akan mencakup semua variabel yang dijabarkan di bagian 4.3.
    - `admin_kegiatan` menggunakan fitur **"Generate Assignment dari Hasil Kegiatan Lain"**, memilih "REGSOSEK 2022 - LISTING" sebagai sumber.
    - Sistem secara otomatis membuat `Assignment` baru untuk setiap keluarga, dan mengisi `prefilled_data` dengan output dari fase Listing (`nama_krt`, `alamat`, `geotag`, dan `foto_rumah_id`).

2.  **Pelaksanaan (PPL di Cerdas Mobile):**
    - Saat PPL membuka sebuah tugas, PWA akan menampilkan data `prefilled_data` sebagai informasi referensi yang tidak bisa diubah, termasuk menampilkan foto rumah untuk verifikasi.
    - Di bawahnya, PWA akan merender antarmuka kuesioner yang kompleks berdasarkan `form_schema` pendataan untuk diisi oleh PPL.

### 4.3. Detail Variabel dan Pemetaan Indikator (High-Level)

Kuesioner untuk fase pendataan harus dirancang untuk menangkap variabel-variabel berikut, yang secara langsung memetakan ke indikator kunci yang dibutuhkan pemerintah.

| Blok Kuesioner                   | Variabel Kunci yang Dikumpulkan                                                                                                       | Contoh Pertanyaan / Data                                                                                             | Indikator yang Dihasilkan                                                                                                                                       |
| :------------------------------- | :------------------------------------------------------------------------------------------------------------------------------------ | :------------------------------------------------------------------------------------------------------------------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **I. Kependudukan & Demografi**  | `nik`, `nama`, `tgl_lahir`, `jenis_kelamin`, `status_perkawinan`, `kepemilikan_kartu_identitas`                                       | (Roster per ART) NIK, nama lengkap, hubungan dengan KRT, status perkawinan.                                          | - Struktur umur penduduk<br>- Angka ketergantungan (dependency ratio)<br>- Cakupan kepemilikan dokumen kependudukan                                             |
| **II. Perumahan & Sanitasi**     | `status_kepemilikan_bangunan`, `luas_lantai`, `jenis_dinding`, `jenis_atap`, `sumber_air_minum`, `fasilitas_bab`, `sumber_penerangan` | Status: Milik Sendiri/Sewa. Luas: m². Sumber air: Ledeng/Sumur. Fasilitas BAB: Sendiri/Bersama.                      | - **Akses terhadap Perumahan Layak**<br>- **Akses terhadap Air Minum Layak**<br>- **Akses terhadap Sanitasi Layak**<br>- Persentase rumah tangga dengan listrik |
| **III. Pendidikan**              | `partisipasi_sekolah`, `jenjang_pendidikan`, `ijazah_tertinggi`                                                                       | (Roster per ART) Apakah masih sekolah? Jenjang saat ini. Ijazah tertinggi yang dimiliki.                             | - Angka Partisipasi Sekolah (APS)<br>- Rata-rata Lama Sekolah (RLS)<br>- Tingkat Pendidikan Penduduk                                                            |
| **IV. Kesehatan & Disabilitas**  | `keluhan_kesehatan`, `status_gizi_balita` (jika ada), `jenis_disabilitas`                                                             | (Roster per ART) Riwayat penyakit kronis. Jenis kesulitan yang dialami (melihat, mendengar, dll.).                   | - Profil kesehatan penduduk<br>- Prevalensi disabilitas<br>- Data awal untuk identifikasi risiko stunting                                                       |
| **V. Ketenagakerjaan**           | `status_bekerja`, `lapangan_usaha`, `jabatan_pekerjaan`, `status_kepemilikan_usaha`                                                   | (Roster per ART >15th) Apakah bekerja seminggu terakhir? Sektor (Pertanian, Jasa). Status (Karyawan, Wiraswasta).    | - Tingkat Partisipasi Angkatan Kerja (TPAK)<br>- **Profil Ketenagakerjaan** (formal/informal)<br>- Distribusi tenaga kerja per sektor                           |
| **VI. Aset & Kepemilikan Usaha** | `kepemilikan_lahan`, `jumlah_ternak`, `kepemilikan_kendaraan`, `kepemilikan_aset_elektronik`, `akses_kredit_usaha`                    | Apakah memiliki lahan pertanian? Jumlah sapi. Punya motor/mobil? Punya kulkas/TV? Apakah pernah mendapat KUR?        | - **Profil Ekonomi & Tingkat Kesejahteraan**<br>- Indeks Kepemilikan Aset (proxy pendapatan)<br>- Akses terhadap layanan keuangan                               |
| **VII. Perlindungan Sosial**     | `penerimaan_pkh`, `penerimaan_bpnt`, `penerimaan_blt`, `kepesertaan_bpjs`                                                             | (Per Keluarga & ART) Apakah menerima bantuan PKH dalam 3 bulan terakhir? Apakah terdaftar sebagai penerima PBI BPJS? | - **Cakupan Program Perlindungan Sosial**<br>- Analisis inklusi/eksklusi error program bantuan                                                                  |

## 5. Skenario Operasional Kunci dan Implikasinya

Kegiatan lapangan tidak pernah berjalan mulus sepenuhnya. Platform Cerdas harus dirancang untuk menangani anomali dan skenario dunia nyata secara elegan. Berikut adalah beberapa skenario kunci dan implikasi fitur yang wajib ada:

### Skenario A: Penambahan Unit Observasi Baru di Lapangan (Saat Listing)

- **Situasi:** Seorang PPL sedang melakukan listing di sebuah SLS. Ia menemukan sebuah rumah baru yang dihuni oleh satu keluarga yang belum pernah terdata sebelumnya.
- **Implikasi Fitur untuk Cerdas Mobile (PWA) & Cerdas-SM (Backend):**
  - PWA harus menyediakan fitur "Tambah Keluarga Baru" (atau "Tambah Assignment Baru") di halaman daftar tugas (`AssignmentListPage`).
  - Saat PPL memulai, sebuah `Assignment` baru dibuat secara lokal dengan label awal, misalnya, "Penugasan Baru".
  - `form_schema` untuk kegiatan Listing ini akan memiliki `assignment_label_template` yang dikonfigurasi, contohnya: `"{nama_krt} - (No. Urut Bangunan: {no_urut_bangunan})"`.
  - Saat PPL mengisi formulir dan mengetik nama kepala keluarga (misalnya, "Budi Santoso") dan nomor urut bangunan (misalnya, "15"), PWA akan **secara dinamis memperbarui label assignment tersebut secara real-time**.
  - Di daftar tugas, PPL akan melihat label berubah dari "Penugasan Baru" menjadi "Budi Santoso - (No. Urut Bangunan: 15)".
  - Implementasi teknis yang lebih detail untuk alur kerja ini, termasuk penanganan data offline dan sinkronisasi, dijelaskan dalam dokumen terpisah: **`ppl-new-assignment-creation.md`**.

### Skenario B: Penanganan Unit Observasi Tidak Ditemukan (Saat Pendataan)

- **Situasi:** Seorang PPL ditugaskan untuk mendata keluarga "Budi Santoso" pada fase Pendataan. `prefilled_data` sudah ada dari hasil Listing. Namun, saat di lapangan, ternyata keluarga tersebut sudah pindah.
- **Implikasi Fitur untuk Cerdas Mobile (PWA):**
  - Formulir pendataan **wajib memiliki opsi untuk menandai status akhir dari kunjungan**. Ini bukan sekadar `Approve/Reject` oleh PML, melainkan hasil temuan PPL.
  - Pilihan status harus jelas, misalnya: `Selesai Dicacah`, `Responden Menolak`, `Keluarga Pindah`, `Rumah Kosong`, `Tidak Ditemukan`.
  - Jika PPL memilih status selain `Selesai Dicacah`, sisa kuesioner harus dinonaktifkan, dan PPL mungkin diwajibkan mengisi kolom catatan.
- **Implikasi Fitur untuk Cerdas-SM (Backend):**
  - Tabel `assignment_responses` perlu mengakomodasi status-status final dari lapangan ini untuk membedakannya dari alur kerja pemeriksaan PPL-PML.

### Skenario C: Koreksi Informasi Kunci

- **Situasi:** Pada `prefilled_data`, nama kepala keluarga tertulis "Budi Santoso". Saat wawancara, PPL mengetahui bahwa nama yang benar di KTP adalah "Budi Santosa".
- **Implikasi Fitur untuk Platform Cerdas:**
  - `prefilled_data` yang ditampilkan di PWA harus bersifat **read-only** untuk menjaga integritas data asli dari Listing.
  - Namun, `form_schema` untuk Pendataan **harus dirancang untuk memiliki field verifikasi/koreksi**. Contohnya: "Nama Kepala Keluarga (sesuai prelist): Budi Santoso" (read-only), diikuti field isian "Nama Kepala Keluarga (hasil verifikasi): [input teks]".
  - Dengan demikian, sistem menyimpan baik data asli maupun data yang telah dikoreksi, yang sangat penting untuk analisis kualitas data di kemudian hari.

## 6. Fase Pasca-Lapangan: Pemantauan dan Ekspor Data

Setelah data terkumpul dan divalidasi, nilainya terletak pada kemudahan akses dan analisis.

- **Pemantauan Progres (Monitoring):**

  - **Implikasi Fitur untuk Cerdas-SM (Filament):** Panel admin **wajib memiliki dasbor pemantauan** untuk `admin_kegiatan`. Dasbor ini harus menampilkan statistik agregat secara _real-time_ atau mendekati _real-time_, seperti:
    - Jumlah `Assignment` berdasarkan status (Assigned, Submitted by PPL, Approved by PML, dll.).
    - Progres per PPL/PML atau per wilayah.
    - Distribusi status akhir lapangan (berapa banyak yang menolak, pindah, dll.).
    - Tampilan peta (opsional/lanjutan) yang memvisualisasikan geotag yang telah dikumpulkan.

- **Ekspor Data:**
  - **Implikasi Fitur untuk Cerdas-SM (Filament):** Platform **wajib menyediakan modul ekspor data yang fleksibel**.
  - Admin harus dapat mengunduh data `assignment_responses` yang sudah bersih (misalnya, yang berstatus `Approved by Admin`).
  - Opsi ekspor minimal harus mencakup format **CSV** dan **Excel**.
  - Fitur ekspor harus memungkinkan admin untuk memilih kolom mana yang akan disertakan, dan idealnya dapat menangani data relasional (misalnya, data roster individu diekspor ke file terpisah yang dapat di-join dengan data keluarga).

## 7. Ringkasan: Fitur Kunci Platform Cerdas yang Wajib Dikembangkan

Berdasarkan studi kasus ini, berikut adalah daftar fitur non-negosiabel yang harus menjadi fokus pengembangan Platform Cerdas:

1.  **Manajemen Kegiatan Multi-Fase:** Kemampuan untuk membuat kegiatan yang output-nya menjadi input bagi kegiatan lain.
2.  **Generator Assignment dari Kegiatan Sebelumnya:** Alat di panel admin untuk membuat `Assignment` secara massal dari hasil kegiatan yang sudah selesai.
3.  **Dukungan Tipe Input Lanjutan:** Kapabilitas `form_schema` dan PWA untuk menangani **Geotag (GPS)** dan **Foto (Kamera)** secara _native_.
4.  **Mekanisme `prefilled_data`:** Kemampuan untuk menyuntikkan data dari sumber sebelumnya ke dalam `Assignment` baru sebagai informasi referensi.
5.  **Kemampuan PPL Menambah Entitas Baru di Lapangan:** Fitur bagi petugas untuk membuat record baru "on-the-fly" di dalam `Assignment` yang berbasis wilayah.
6.  **Manajemen Status Final Lapangan:** Mekanisme bagi PPL untuk memberi label pada `Assignment` dengan hasil akhir kunjungan (misalnya, 'Tidak Ditemukan', 'Menolak').
7.  **Dasbor Pemantauan Progres Real-time:** Antarmuka visual bagi admin untuk melacak kemajuan dan kualitas data selama periode lapangan.
8.  **Modul Ekspor Data Fleksibel:** Kemampuan untuk mengunduh data bersih dalam format standar (CSV, Excel) untuk analisis lebih lanjut.


--- END OF FILE: spec\studi-kasus-kegiatan.md ---



