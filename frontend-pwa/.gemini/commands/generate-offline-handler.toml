# Perintah untuk menghasilkan service handler offline (VERSI REFACTOR).
description = "Generate the core OfflineService class for IndexedDB using Dexie.js, with an updated schema and methods to support the new UI flow."

prompt = """
Generate a TypeScript class named `OfflineService` located in `src/services/offline/OfflineService.ts`, using Dexie.js.

**1. Database Schema Definition (Dexie - Diperbarui):**
Define the Dexie database 'CapiDB' with the following stores:

- **`assignments`**:
  - `primary key`: `[activityId, assignmentId]`
  - `indexes`: `[activityId, status]`

- **`form_schemas` (BARU)**:
  - `primary key`: `activityId` (Menyimpan satu skema aktif per kegiatan)
  - `purpose`: Menyimpan objek form_schema secara terpisah agar mudah diakses.

- **`sync_queue`**:
  - `primary key`: `++id`
  - `indexes`: `metadata.activityId`

- **`master_data`**:
  - `primary key`: `key` (string, e.g., 'KBLI_2020')
  - This table is a simple **key-value document store** for holding large master data JSON objects. The key combines the type and version.
  - This is a key-value store. The key itself should contain the `activityId` for activity-specific master data to ensure proper namespacing.

- **`app_metadata`**:
  - `primary key`: `key` (string, e.g., 'lastSyncTimestamp_kegiatan_123')
  - `no indexes needed`
  - This table is a simple key-value store for client-side app settings.

- **`error_logs`**:
  - `primary key`: `id` (auto-incrementing integer, `++id`)
  - `indexes`: `timestamp`
  - This table queues client-side error logs. It is global and does not need to be scoped by `activityId`.

**2. Public Methods Implementation (Diperbarui):**
Implement the following public methods.

// --- Metode Pengecekan & Inisialisasi ---
/**
 * (BARU) Memeriksa dengan cepat apakah data untuk sebuah kegiatan sudah ada di IndexedDB.
 * @param activityId - ID kegiatan.
 * @returns {Promise<boolean>} True jika ada setidaknya satu assignment.
 */
- `async hasDataForActivity(activityId: string): Promise<boolean>`

/**
 * (BARU) Menghapus semua data yang terkait dengan satu kegiatan.
 * Digunakan sebelum menjalankan "Sync Full Assignment". Harus transaksional.
 * @param activityId - ID kegiatan.
 */
- `async clearDataForActivity(activityId: string): Promise<void>`

// --- Metode Akses Data ---
- `async storeAssignment(activityId: string, assignmentData: AssignmentResponse): Promise<void>`
- `async getAssignmentById(activityId: string, assignmentId: string): Promise<AssignmentResponse | undefined>`
- `async getAllAssignments(activityId: string): Promise<AssignmentResponse[]>`

// --- Metode Form Schema ---
/**
 * (BARU) Menyimpan form schema untuk sebuah kegiatan.
 * @param activityId
 * @param schema
 */
- `async storeFormSchema(activityId: string, schema: FormSchema): Promise<void>`

/**
 * (BARU) Mengambil form schema yang tersimpan untuk sebuah kegiatan.
 * @param activityId
 * @returns {Promise<FormSchema | undefined>}
 */
- `async getFormSchema(activityId: string): Promise<FormSchema | undefined>`

- `async queueForSync(action: SyncAction): Promise<void>`
  # --> PERUBAHAN: Pastikan `action.metadata` sudah berisi `activityId`.
  - Adds a new action to the `sync_queue` table. The `action.metadata` object MUST contain the relevant `activityId`.

- `async getNextQueueItem(): Promise<SyncAction | undefined>`
  - Retrieves the oldest 'pending' item from the `sync_queue`. The returned object will contain the `activityId` in its metadata.

- `async updateQueueItemStatus(id: number, status: 'processing' | 'completed' | 'failed', error?: string): Promise<void>`
  - Updates the status of an item in the `sync_queue`.

- `async applyServerUpdates(activityId: string, updates: ServerUpdatePayload): Promise<void>`
  - JSDoc harus diperjelas: Metode ini sekarang digunakan oleh SEMUA jenis sync download (Initial, Delta, Full) untuk memproses payload dan menyimpannya ke DB.

- `async storeErrorLog(log: ErrorLog): Promise<void>`
  - Adds a new error log to the global `error_logs` table.

- `async getMetadata<T>(key: string): Promise<T | undefined>`
  - Retrieves a value from the `app_metadata` table by its key.

- `async setMetadata(key: string, value: any): Promise<void>`
  - Performs an "upsert" on the `app_metadata` table.

- `async storeMasterData(key: string, data: object): Promise<void>`
  - Performs an "upsert" on the `master_data` table using the provided key.
  - `async getMasterData<T>(key: string): Promise<T | undefined>`
  - Retrieves a full master data object from the `master_data` table by its key.

**3. Architectural Requirements:**
- All methods that interact with Dexie must be `async`.
- Ensure all database operations are non-blocking.
- Include detailed JSDoc comments for each method.
- The class should export a single, initialized instance of `OfflineService`.
"""
