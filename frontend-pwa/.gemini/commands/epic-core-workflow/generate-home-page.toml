# Perintah untuk menghasilkan Halaman Beranda (Daftar Kegiatan) setelah pengguna login.
description = "Generate the Home Page component that appears after login, displaying a list of the user's assigned statistical activities."

prompt = """
Generate a Vue 3 component file located at `src/views/HomePage.vue`. This component serves as the main landing page after a user successfully logs in. Its primary function is to fetch and display a list of all statistical activities the user is a member of.

**1. Technical Requirements:**
- The component **MUST** use the `<script setup>` syntax with the Composition API.
- The entire UI **MUST** be built using Framework7-Vue components (`<f7-page>`, `<f7-navbar>`, `<f7-list>`, `<f7-list-item>`, `<f7-chip>`, etc.).
- The component must inject and use the `ApiClient` singleton to fetch data.
- It should use `vue-router`'s `useRouter` for navigation.

**2. Component Logic (`<script setup>`):**
- **State Management:**
  - `const activities = ref<Activity[]>([]);`: A reactive ref to store the list of activities fetched from the server. Define a placeholder `Activity` interface for type safety, e.g., `{ id: string; name: string; year: number; user_role: 'PPL' | 'PML'; status: string; }`.
  - `const isLoading = ref<boolean>(true);`: To control the display of a loading skeleton.
  - `const router = useRouter();`: To handle navigation programmatically.

- **`onMounted` Lifecycle Hook:**
  - Immediately set `isLoading` to `true`.
  - Call a new method on the `ApiClient`, `getActivitiesForUser()`, which is expected to return an array of the user's activities.
  - Wrap the API call in a `try...catch...finally` block.
    - On success, populate `activities.value`.
    - On error, log the error to the console and potentially show a toast notification.
    - In the `finally` block, set `isLoading` to `false`.

- **Methods:**
  - `function handleActivityClick(activityId: string)`: A method that navigates the user to the specific activity's dashboard page. It should call `router.push(`/activity/${activityId}/dashboard`);`.
  - `function getRoleChipColor(role: string): string`: Returns 'green' if role is 'PPL', 'blue' if 'PML', and 'gray' otherwise.
  - `function getStatusChipColor(status: string): string`: Returns a color based on the activity status (e.g., 'orange' for 'Berlangsung', 'gray' for 'Selesai').

**3. Template Structure (`<template>`):**
- **Root Element:** `<f7-page>`.
- **Navbar:** Use `<f7-navbar title="Beranda">`.
- **Main Content:**
  - **Loading State:**
    - Use `v-if="isLoading"` to display a skeleton loader. This should be an `<f7-list>` with several `<f7-list-item>` elements using skeleton classes like `skeleton-text`.
  - **Empty State:**
    - Use `v-else-if="!isLoading && activities.length === 0"` to display a message. Render an `<f7-block-title>` and an `<f7-block>` with a clear message like "Anda tidak memiliki kegiatan aktif saat ini. Silakan hubungi administrator Anda."
  - **Activities List:**
    - Use `v-else` with an `<f7-list media-list>` to render the activities.
    - Loop through the list using `v-for="activity in activities" :key="activity.id"`.
    - Each item should be an `<f7-list-item>` that is `clickable` and triggers `@click="handleActivityClick(activity.id)"`.
    - **Content of each list item:**
      - **Title:** The `title` attribute should be `{{ activity.name }}`.
      - **Footer (for details):** Use the `footer` slot to display details using `<f7-chip>` components for better visual separation.
        - A chip for the year: `<f7-chip :text="activity.year" />`
        - A chip for the role: `<f7-chip :text="activity.user_role" :color="getRoleChipColor(activity.user_role)" />`
        - A chip for the status: `<f7-chip :text="activity.status" :color="getStatusChipColor(activity.status)" />`

"""
